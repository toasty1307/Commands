using System;using System.Collections.Generic;using System.ComponentModel.DataAnnotations;using System.ComponentModel.DataAnnotations.Schema;using System.Diagnostics;using System.IO;using System.Linq;using System.Reflection;using System.Text.RegularExpressions;using System.Threading.Tasks;using Commands;using Commands.CommandsStuff;using Commands.CoolStuff.Pagination;using Commands.Data;using Commands.Types;using Commands.Utils;using CommandsTest.Commands.Misc;using CommandsTest.Data;using CommandsTest.Modules;using CommandsTest.Utils;using DSharpPlus;using DSharpPlus.Entities;using DSharpPlus.EventArgs;using DSharpPlus.Lavalink;using DSharpPlus.Lavalink.EventArgs;using DSharpPlus.Net;using Microsoft.CodeAnalysis.CSharp.Scripting;using Microsoft.CodeAnalysis.Scripting;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.ChangeTracking;using Microsoft.EntityFrameworkCore.Infrastructure;using Microsoft.EntityFrameworkCore.Migrations;using Microsoft.Extensions.Logging;using Newtonsoft.Json;using Group=Commands.CommandsStuff.Group;using GuildContext=Commands.Data.GuildContext;using GuildEntity=Commands.Data.GuildEntity;using LoggerFactory=Commands.Utils.LoggerFactory;namespace Commands{public class CommandDispatcher:CommandsBase{private readonly Regex _splitWordsRegex=new("(?<=\")[^\"]*(?=\")|[^\" ]+");public CommandRegistry Registry{get;}public ArgumentParser ArgumentParser{get;}public List<Inhibitor<DiscordMessage,Command>>MessageInhibitors{get;set;}=new();public List<Inhibitor<DiscordInteraction,Command>>InteractionInhibitors{get;set;}=new();public Dictionary<string,Action<ComponentInteractionCreateEventArgs>>ComponentActions{get;set;}=new();public CommandDispatcher(DiscordClient client,CommandRegistry registry):base(client){Registry=registry;ArgumentParser=new ArgumentParser(client,Registry);}public void AddInhibitor(Inhibitor<DiscordMessage,Command>inhibitor)=>MessageInhibitors.Add(inhibitor);public void AddInhibitor(Inhibitor<DiscordInteraction,Command>inhibitor)=>InteractionInhibitors.Add(inhibitor);public string[]GetCommandString(DiscordMessage message){try{var prefix=(Extension.Provider.Get(message.Channel.Guild)).Prefix;if(string.IsNullOrEmpty(prefix))prefix=Extension.CommandPrefix;prefix=prefix.ToLower();var mentionPrefix=$"<@!{Client.CurrentUser.Id}>";var words=message.Content.Split(" ");words[0]=words[0].ToLower().Replace(prefix.Trim(),string.Empty).Replace(mentionPrefix,string.Empty);var commandMessage=new Regex("\\s+").Replace(string.Join(" ",words)," ").Trim();words=commandMessage.Split(" ");return words;}catch(Exception e){Logger.Error(e);throw;}}private void MakeSureDataBaseThingExists(DiscordGuild guild){var settings=Extension.Provider.Get(guild);if(settings is null){Extension.Provider.Update(guild,new GuildEntity{Prefix=Extension.CommandPrefix,Commands=new Dictionary<DisabledCommandEntity,bool>(Extension.Registry.Commands.Select(x=>new KeyValuePair<DisabledCommandEntity,bool>(new DisabledCommandEntity{Name=x.Name,GuildId=guild.Id},true))),Groups=new Dictionary<DisabledGroupEntity,bool>(Extension.Registry.Groups.Select(x=>new KeyValuePair<DisabledGroupEntity,bool>(new DisabledGroupEntity{Name=x.Name,GuildId=guild.Id},true))),Id=guild?.Id??0});}}public string[]SplitWords(string str){var matches=_splitWordsRegex.Matches(str);var matchArray=matches.ToArray();var matchStrings=matchArray.Select(x=>x.Value);return matchStrings.ToArray();}public bool ShouldHandle(DiscordMessage message){if(message.Author.IsBot)return false;if(string.IsNullOrWhiteSpace(message.Content))return false;var prefix=Extension.Provider.Get(message.Channel.Guild)?.Prefix??Extension.CommandPrefix;if(string.IsNullOrEmpty(prefix))prefix=Extension.CommandPrefix;var mentionPrefix=$"<@!{Client.CurrentUser.Id}>";var prefixRegex=new Regex($@"^({prefix}|{mentionPrefix})");var match=prefixRegex.Match(message.Content.ToLower());if(!match.Success&&message.Channel.Guild is not null)return false;return true;}public async Task Handle(DiscordClient _,MessageCreateEventArgs args){var message=args.Message;try{MakeSureDataBaseThingExists(message.Channel.Guild);if(!ShouldHandle(message))return;var words=GetCommandString(message);var commands=Registry.FindCommands(words[0].ToLower());if(commands.Any()&&commands.Length>15)await message.ReplyAsync("thats a lot of commands, be more specific kid");else if(commands.Any()&&commands.Length>1)commands=Registry.FindCommands(words[0].ToLower(),true);if(!commands.Any()&&Registry.UnknownCommand is not null){await Registry.UnknownCommand.Run(new MessageContext{Message=message,Client=Client,Collector=new ArgumentCollector()});return;}await RunCommand(commands[0],message,SplitWords(string.Join(' ',words)));}catch(Exception e){Logger.Error(e);}}public async Task Handle(DiscordClient _,InteractionCreateEventArgs args){var interaction=args.Interaction;try{if(interaction.Type is not InteractionType.ApplicationCommand)return;await interaction.CreateResponseAsync(InteractionResponseType.DeferredChannelMessageWithSource,new DiscordInteractionResponseBuilder{IsEphemeral=true});var command=interaction.Data.Name;Logger.LogInformation($"Received Interaction For Slash Command {command}");MakeSureDataBaseThingExists(interaction.Channel.Guild);var argsList=interaction.Data.Options?.Select(x=>x.Value?.ToString()).ToList()??new List<string>();var commands=Registry.FindCommands(command.ToLower());if(commands.Length==0)Extension.UnknownCommandRun(interaction);try{await RunCommand(commands[0],interaction,SplitWords(string.Join(' ',argsList)));}catch(Exception e){Logger.Error(e);}}catch(Exception e){Logger.Error(e);throw;}}public async Task Handle(DiscordClient _,ContextMenuInteractionCreateEventArgs interaction){var commandName=interaction.Interaction.Data.Name;var commands=Registry.FindCommands(commandName.ToLower());await interaction.Interaction.CreateResponseAsync(InteractionResponseType.DeferredChannelMessageWithSource,new DiscordInteractionResponseBuilder{IsEphemeral=true});try{var collector=new ArgumentCollector{[commands[0].Arguments[0].Key]=interaction.Type switch{ApplicationCommandType.SlashCommand=>throw new Exception("no"),ApplicationCommandType.UserContextMenu=>interaction.TargetUser,ApplicationCommandType.MessageContextMenu=>interaction.TargetMessage,_=>throw new ArgumentOutOfRangeException(nameof(interaction.Type))}};await commands[0].Run(new InteractionContext{Client=Client,Interaction=interaction.Interaction,Collector=collector});}catch(Exception e){Logger.Error(e);}}public async Task Handle(DiscordClient _,ComponentInteractionCreateEventArgs interaction){await interaction.Interaction.CreateResponseAsync(InteractionResponseType.DeferredMessageUpdate);if(ComponentActions.ContainsKey(interaction.Id))ComponentActions[interaction.Id].Invoke(interaction);}public async Task Handle(DiscordClient _,MessageUpdateEventArgs args){var message=args.Message;if(!Extension.Options.NonCommandEditable)return;try{MakeSureDataBaseThingExists(message.Channel.Guild);if(!ShouldHandle(message))return;var words=GetCommandString(message);var commands=Registry.FindCommands(words[0].ToLower());if(commands.Any()&&commands.Length>15)await message.ReplyAsync("thats a lot of commands, be more specific kid");else if(commands.Any()&&commands.Length>1)commands=Registry.FindCommands(words[0].ToLower(),true);if(!commands.Any()&&Registry.UnknownCommand is not null){await Registry.UnknownCommand.Run(new MessageContext{Message=message,Client=Client,Collector=new ArgumentCollector()});return;}await RunCommand(commands[0],message,SplitWords(string.Join(' ',words)));}catch(Exception e){Logger.Error(e);}}private async Task RunCommand(Command command,DiscordMessage message,string[]strings){var inhibition=MessageInhibitors.Select(inhibitor=>inhibitor.Invoke(message,command)).FirstOrDefault(result=>result!=null);if(inhibition is not default(Inhibition)){Extension.CommandBlocked(command,message,inhibition.Reason);await message.ReplyAsync(inhibition.Response);await command.OnBlock(message,inhibition.Reason);return;}try{var(canCommandBeUsed,reason)=await command.IsUsable(message);if(!canCommandBeUsed){var missingClientPerms=(message.Channel.Guild.Members[Client.CurrentUser.Id].PermissionsIn(message.Channel)^command.ClientPermissions)&command.ClientPermissions;var missingUserPerms=(message.Channel.Guild.Members[message.Author.Id].PermissionsIn(message.Channel)^command.UserPermissions)&command.UserPermissions;var throttle=command.GetThrottle(message.Author);var seconds=uint.MinValue;if(throttle is not null)seconds=(uint)(command.ThrottlingOptions.Duration-(DateTime.Now.ConvertToUnixTimestamp()-throttle.Start.ConvertToUnixTimestamp()));Extension.CommandBlocked(command,message,reason,missingUserPerms,missingClientPerms,seconds);await command.OnBlock(message,reason,missingUserPerms,missingClientPerms,seconds);return;}var argumentCollector=ArgumentParser.Parse(strings,command,message);command.Throttle(message.Author);await command.Run(new MessageContext{Client=Client,Message=message,Collector=argumentCollector});}catch(Exception e){if(e is FriendlyException){await message.ReplyAsync(e.Message);return;}Logger.Error(e);var embed=new DiscordEmbedBuilder{Title="Error",Description=$"Error (`{e.GetType().Name}`) while Running Command `{command.Name}`",Color=new DiscordColor("2F3136"),Timestamp=DateTimeOffset.Now,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=message.Author.AvatarUrl,Text=$"Command ran by {message.Author.Username}#{message.Author.Discriminator}"}}.AddField("Error Message",$"`{e.Message}`").AddField("Stack Trace",$"```\n{e.StackTrace![..Math.Min(e.StackTrace.Length-1,1000)]}\n```");await message.ReplyAsync(embed);await message.ReplyAsync($"here be the support server if you want to join ig: {Extension.Options.Invite}");}}private async Task RunCommand(Command command,DiscordInteraction interaction,string[]strings){var inhibition=InteractionInhibitors.Select(inhibitor=>inhibitor(interaction,command)).FirstOrDefault(result=>result!=null);if(inhibition is not default(Inhibition)){Extension.CommandBlocked(command,interaction,inhibition.Reason);await interaction.FollowUpAsync(inhibition.Response);await command.OnBlock(interaction,inhibition.Reason);return;}try{var(canCommandBeUsed,reason)=await command.IsUsable(interaction);if(!canCommandBeUsed){var missingClientPerms=(interaction.Channel.Guild.Members[Client.CurrentUser.Id].PermissionsIn(interaction.Channel)^command.ClientPermissions)&command.ClientPermissions;var missingUserPerms=(interaction.Channel.Guild.Members[interaction.User.Id].PermissionsIn(interaction.Channel)^command.UserPermissions)&command.UserPermissions;var throttle=command.GetThrottle(interaction.User);var seconds=uint.MinValue;if(throttle is not null){seconds=(uint)(command.ThrottlingOptions.Duration-(DateTime.Now.ConvertToUnixTimestamp()-throttle.Start.ConvertToUnixTimestamp()));}Extension.CommandBlocked(command,interaction,reason,missingUserPerms,missingClientPerms,seconds);await command.OnBlock(interaction,reason,missingUserPerms,missingClientPerms,seconds);return;}var argumentCollector=ArgumentParser.Parse(strings,command,interaction);command.Throttle(interaction.User);await command.Run(new InteractionContext{Client=Client,Interaction=interaction,Collector=argumentCollector});}catch(Exception e){if(e is FriendlyException){await interaction.FollowUpAsync(e.Message);return;}Logger.Error(e);var embed=new DiscordEmbedBuilder{Title="Error",Description=$"Error (`{e.GetType().Name}`) while Running Command `{command.Name}`",Color=new DiscordColor("2F3136"),Timestamp=DateTimeOffset.Now,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=interaction.User.AvatarUrl,Text=$"Command ran by {interaction.User.Username}#{interaction.User.Discriminator}"}}.AddField("Error Message",$"`{e.Message}`").AddField("Stack Trace",$"```\n{e.StackTrace![..Math.Min(e.StackTrace.Length-1,1000)]}\n```");await interaction.FollowUpAsync(embed);await interaction.FollowUpAsync($"here be the support server if you want to join ig: {Extension.Options.Invite}");}}}public class Inhibition{public string Reason{get;init;}public string Response{get;init;}}public delegate Inhibition Inhibitor<in T,in T2>(T t,T2 t2)where T2:Command;}namespace Commands{public class CommandRegistry:CommandsBase{public List<Command>Commands{get;}=new();public List<Group>Groups{get;}=new();public List<ArgumentType>ArgumentTypes{get;}=new();public Command UnknownCommand{get;private set;}public CommandRegistry(DiscordClient client):base(client){}public T GetArgumentType<T>()where T:ArgumentType{return ArgumentTypes.First(x=>x is T)as T;}public ArgumentType GetArgumentType(Type type){return ArgumentTypes.First(x=>x.GetType()==type);}public ArgumentType GetArgumentTypeFromReturnType(Type type){return ArgumentTypes.First(x=>x.GetType().BaseType!.GetGenericArguments().First()==type||x.GetType()==type);}public void RegisterCommands(Assembly assembly){foreach(var type in assembly.GetTypes()){if(!type.IsSubclassOf(typeof(Command)))continue;var command=(Command)type.GetConstructor(new[]{typeof(DiscordClient)})?.Invoke(new object[]{Client});RegisterCommand(command);}}public void RegisterCommands(Command[]commands)=>commands.ToList().ForEach(RegisterCommand);public void RegisterCommand(Command command){var canRegister=CanRegister(command);if(canRegister is not null){Logger.LogError($"Error registering command: {canRegister}");Environment.Exit(1);}var group=Groups.First(x=>string.Equals(x.Name,command.GroupName,StringComparison.CurrentCultureIgnoreCase));command.Group=group;group.Commands.Add(command);if(command.Unknown)UnknownCommand=command;Commands.Add(command);Extension.CommandRegistered(command);Command.Commands.Add(command);Logger.LogInformation($"Registered Command {command.Name}");}public ApplicationCommandOptionType GetApplicationCommandOptionTypeFromArgumentType(ArgumentType type){var genericParam=type.GetType().BaseType!.GenericTypeArguments[0];if(genericParam==typeof(bool)||genericParam==typeof(bool?))return ApplicationCommandOptionType.Boolean;if(genericParam==typeof(DiscordChannel))return ApplicationCommandOptionType.Channel;if(genericParam==typeof(int)||genericParam==typeof(uint))return ApplicationCommandOptionType.Integer;if(genericParam==typeof(DiscordUser)||genericParam==typeof(DiscordRole))return ApplicationCommandOptionType.Mentionable;if(genericParam==typeof(double))return ApplicationCommandOptionType.Number;if(genericParam==typeof(DiscordRole))return ApplicationCommandOptionType.Role;if(genericParam==typeof(string))return ApplicationCommandOptionType.String;if(genericParam==typeof(DiscordUser))return ApplicationCommandOptionType.User;if(genericParam==typeof(DiscordApplicationCommand)||genericParam==typeof(Command))return ApplicationCommandOptionType.String;return ApplicationCommandOptionType.String;}public async Task RegisterSlashCommands(Command[]commands,DiscordGuild guild){foreach(var command in commands.Where(x=>!x.Hidden&&x.RegisterSlashCommand)){var slashCommandArguments=new List<DiscordApplicationCommandOption>();if(command.Arguments is not null){var optionalArgs=command.Arguments.Where(x=>x.Optional).ToList();var nonOptionalArgs=command.Arguments.Where(x=>!x.Optional).ToList();var commandArguments=nonOptionalArgs.ToList();commandArguments.AddRange(optionalArgs);foreach(var commandArgument in commandArguments){var oneOf=new List<DiscordApplicationCommandOptionChoice>();if(commandArgument.OneOf is not null){foreach(var oneOfArg in commandArgument.OneOf){oneOf.Add(new DiscordApplicationCommandOptionChoice(oneOfArg!.ToLower(),oneOfArg));}}if(commandArgument.OneOf is null&&commandArgument.Types is not null&&(commandArgument.Types[0]??typeof(string))==typeof(CommandArgumentType)){oneOf.AddRange(Commands.Where(x=>!x.Hidden).Select(x=>new DiscordApplicationCommandOptionChoice(x.Name.ToString(),x.Name)));}if(commandArgument.OneOf is null&&commandArgument.Types is not null&&(commandArgument.Types[0]??typeof(string))==typeof(GroupArgumentType)){oneOf.AddRange(Groups.Select(x=>new DiscordApplicationCommandOptionChoice(x.Name.ToLower(),x.Name)));}if(oneOf.Count==0&&commandArgument.Types is not null)slashCommandArguments.Add(new DiscordApplicationCommandOption(commandArgument.Key.ToLower(),commandArgument.Description??"yet to add description",GetApplicationCommandOptionTypeFromArgumentType(GetArgumentTypeFromReturnType(commandArgument.Types[0]??typeof(string))),!commandArgument.Optional));else if(commandArgument.Types is not null)slashCommandArguments.Add(new DiscordApplicationCommandOption(commandArgument.Key.ToLower(),commandArgument.Description??"yet to add description",GetApplicationCommandOptionTypeFromArgumentType(GetArgumentTypeFromReturnType(commandArgument.Types[0]??typeof(string))),!commandArgument.Optional,oneOf));}}var slashCommand=slashCommandArguments.Count!=0?new DiscordApplicationCommand(command.Name.ToLower(),command.Description??"no description lolxd",slashCommandArguments,true):new DiscordApplicationCommand(command.Name.ToLower(),command.Description??"no description lolxd",defaultPermission:true);await guild.CreateApplicationCommandAsync(slashCommand);if(command.Arguments?[0].Types!=null&&command.Arguments[0].Types[0]==typeof(DiscordUser)){slashCommand=new DiscordApplicationCommand(command.Name.ToLower(),null,null,true,ApplicationCommandType.UserContextMenu);await guild.CreateApplicationCommandAsync(slashCommand);}else if(command.Arguments?[0].Types!=null&&command.Arguments[0].Types[0]==typeof(DiscordMessage)){slashCommand=new DiscordApplicationCommand(command.Name.ToLower(),null,null,true,ApplicationCommandType.MessageContextMenu);await guild.CreateApplicationCommandAsync(slashCommand);}await Task.Delay(500);}}public string CanRegister(Command command){if(Commands.Any(x=>x.Name==command.Name||(x.Aliases is not null&&x.Aliases.Contains(command.Name))||(command.Aliases is not null&x.Aliases is not null&&command.Aliases.Intersect(x.Aliases).Any())))return$"A command with the same name/alias {command.Name} is already registered";if(!Groups.Any(x=>string.Equals(x.Name,command.GroupName,StringComparison.CurrentCultureIgnoreCase)))return$"Group {command.GroupName} is not registered";if(Groups.First(x=>string.Equals(x.Name,command.GroupName,StringComparison.CurrentCultureIgnoreCase)).Commands.Any(x=>x.MemberName==command.MemberName))return$"A command with the member name {command.MemberName} is already registered in the group";if(command.Unknown&&UnknownCommand is not null)return"A Unknown command is already registered";return null;}public void RegisterArgumentTypes(Assembly assembly){foreach(var type in assembly.GetTypes()){var attribute=type.GetCustomAttribute<ArgumentTypeAttribute>();if(attribute==null)continue;if(!type.IsSubclassOf(typeof(ArgumentType)))throw new InvalidOperationException($"Type {type.FullName} has {nameof(ArgumentTypeAttribute)} but doesn't extend {nameof(ArgumentType)}.");var argumentType=(ArgumentType)type.GetConstructor(new[]{typeof(DiscordClient)})?.Invoke(new object[]{Client});RegisterArgumentType(argumentType);}}public void RegisterArgumentTypes(IEnumerable<ArgumentType>argumentTypes)=>argumentTypes.ToList().ForEach(RegisterArgumentType);public void RegisterArgumentType(ArgumentType type){var canRegister=CanRegister(type);if(canRegister is not null){Logger.LogError($"Error registering Argument Type: {canRegister}");Environment.Exit(1);}Extension.TypeRegistered(type);Logger.LogInformation($"Registered Argument type {type}");ArgumentTypes.Add(type);}private string CanRegister(ArgumentType type)=>ArgumentTypes.Any(x=>x.GetType()==type.GetType())?$"An argument type with the type {type} is already registered":null;public void RegisterGroups(Group[]groups)=>groups.ToList().ForEach(RegisterGroup);public void RegisterGroup(Group group){var canRegister=CanRegister(group);if(canRegister is not null){Logger.LogError($"Error registering group: {canRegister}");Environment.Exit(1);}if(Groups.Count!=0)group.Id=Groups[^1].Id+1;else group.Id=0;Extension.GroupRegistered(group);Group.Groups.Add(group);Logger.LogInformation($"Registered group {group.Name}");Groups.Add(group);}private string CanRegister(Group group)=>Groups.Any(x=>x.Name==@group.Name)?$"A group with the name {@group.Name} is already registered":null;public void RegisterDefaults(){RegisterArgumentTypes(GetType().Assembly);RegisterGroups(new[]{new Group{Name="Utils",Description="Util Commands"},new Group{Name="Commands",Guarded=true,Description="drink milk for strong bones"}});RegisterGroup(new Group{Name="Debug",Description="debug stuff"});RegisterCommands(GetType().Assembly);}public Command[]FindCommands(string search,bool exact=false){Func<Command,string,bool>searchFunc;if(exact)searchFunc=(command,searchStr)=>command.Name.ToLower()==searchStr||command.Aliases is not null&&command.Aliases.Select(x=>x.ToLower()).ToList().Contains(searchStr)||$"{command.Group.Id}:{command.MemberName}".ToLower()==searchStr;else searchFunc=(command,searchStr)=>command.Name.ToLower().Contains(searchStr)||command.Aliases is not null&&command.Aliases.ToList().Any(x=>x.ToLower().Contains(searchStr))||$"{command.Group.Id}:{command.MemberName}".ToLower()==searchStr;return Commands.Where(x=>!x.Hidden&&searchFunc(x,search.ToLower())).ToArray();}}}namespace Commands{public class CommandsBase{[JsonIgnore]protected ILogger<CommandsBase>Logger{get;}[JsonIgnore]protected DiscordClient Client{get;}[JsonIgnore]protected CommandsExtension Extension=>_extension??=Client.GetCommandsExtension();[JsonIgnore]private CommandsExtension _extension;protected CommandsBase(DiscordClient client){Logger=new Logger<CommandsBase>(new LoggerFactory());Client=client;}}}namespace Commands{public class CommandsConfig{public ulong[]Owners{get;set;}public string Prefix{get;set;}="!";public string Invite{get;set;}="haha no server invite sadge";public bool NonCommandEditable{get;set;}=true;}}namespace Commands{public class CommandsExtension:BaseExtension{public CommandsConfig Options{get;}public List<DiscordUser>Owners{get;}=new();public List<ulong>OwnerIds{get;}public CommandDispatcher Dispatcher{get;private set;}public CommandRegistry Registry{get;private set;}public GuildContext Provider{get;private set;}public event AsyncEventHandler<DiscordMessage>UnknownCommand;public event AsyncEventHandler<DiscordInteraction>UnknownCommandInteraction;public event AsyncEventHandler<Command,DiscordMessage,string,Permissions,Permissions,uint>CommandBlock;public event AsyncEventHandler<Command,DiscordInteraction,string,Permissions,Permissions,uint>CommandBlockInteraction;public event AsyncEventHandler<Command,string,DiscordMessage>CommandCancel;public event AsyncEventHandler<Command,string,DiscordInteraction>CommandCancelInteraction;public event AsyncEventHandler<Group>GroupRegister;public event AsyncEventHandler<Command>CommandRegister;public event AsyncEventHandler<DiscordGuild,string>CommandPrefixChange;public event AsyncEventHandler<DiscordGuild,Command,bool>CommandStatusChange;public event AsyncEventHandler<DiscordGuild,Group,bool>GroupStatusChange;public event AsyncEventHandler<ArgumentType>TypeRegister;public string CommandPrefix=>Options.Prefix;public CommandsExtension(CommandsConfig config){Options=config;OwnerIds=Options.Owners.ToList();}protected override void Setup(DiscordClient client){Client=client;Registry=new CommandRegistry(Client);Dispatcher=new CommandDispatcher(Client,Registry);Provider=new GuildContext();Client.GuildDownloadCompleted+=(_,_)=>FetchOwners();Client.MessageCreated+=Dispatcher.Handle;Client.InteractionCreated+=Dispatcher.Handle;Client.ContextMenuInteractionCreated+=Dispatcher.Handle;Client.ComponentInteractionCreated+=Dispatcher.Handle;Client.MessageUpdated+=Dispatcher.Handle;Provider.DoCacheStuff();}public async Task FetchOwners(){try{foreach(var ownerId in OwnerIds)Owners.Add(await Client.GetUserAsync(ownerId));}catch(Exception e){Client.Logger.LogError("Error Fetching Owners:");Client.Logger.Error(e);}}public void CommandPrefixChanged(DiscordGuild channelGuild,string prefix){CommandPrefixChange.SafeInvoke(channelGuild,prefix);var entity=Provider.Get(channelGuild);entity.Prefix=prefix;Provider.Update(channelGuild,entity);}public void CommandStatusChanged(DiscordGuild guild,Command command,bool enable){CommandStatusChange.SafeInvoke(guild,command,enable);var entity=Provider.Get(guild);entity.Commands.Remove(entity.Commands.First(x=>x.Key.Name==command.Name).Key);entity.Commands.Add(new DisabledCommandEntity{Name=command.Name,GuildId=guild.Id},enable);Provider.Update(guild,entity);}public void UnknownCommandRun(DiscordMessage message){UnknownCommand.SafeInvoke(message);}public void CommandRegistered(Command command){CommandRegister.SafeInvoke(command);}public void CommandBlocked(Command command,DiscordMessage message,string reason,Permissions missingUserPermissions=Permissions.None,Permissions missingClientPermissions=Permissions.None,uint seconds=0){CommandBlock.SafeInvoke(command,message,reason,missingUserPermissions,missingClientPermissions,seconds);}public void CommandCanceled(Command command,string reason,DiscordMessage message){CommandCancel.SafeInvoke(command,reason,message);}public void TypeRegistered(ArgumentType type){TypeRegister.SafeInvoke(type);}public void GroupRegistered(Group group){GroupRegister.SafeInvoke(group);}public void GroupStatusChanged(DiscordGuild guild,Group@group,bool enabled){GroupStatusChange.SafeInvoke(guild,group,enabled);var entity=Provider.Get(guild);entity.Groups.Remove(entity.Groups.First(x=>x.Key.Name==group.Name).Key);entity.Groups.Add(new DisabledGroupEntity{Name=group.Name,GuildId=guild.Id},enabled);Provider.Update(guild,entity);}public void CommandCanceled(Command command,string invalidArgs,DiscordInteraction interaction){CommandCancelInteraction.SafeInvoke(command,invalidArgs,interaction);}public void CommandBlocked(Command command,DiscordInteraction interaction,string reason,Permissions missingUserPermissions=Permissions.None,Permissions missingClientPermissions=Permissions.None,uint seconds=0U){CommandBlockInteraction.SafeInvoke(command,interaction,reason,missingUserPermissions,missingClientPermissions,seconds);}public void UnknownCommandRun(DiscordInteraction interaction){UnknownCommandInteraction.SafeInvoke(interaction);}}}namespace Commands{public class Constants{public const string CommandsDbConnectionString=@"Host=localhost; Database=Commands; Username=toasty; Password=toasty;";}}namespace Commands.Commands.Commands{public class Enabled:Command{public override string GroupName=>"Commands";public override string Description=>"Enable/disable command ig";public override bool GuildOnly=>true;public override bool Guarded=>true;public override Argument[]Arguments=>new Argument[]{new(){Key="CommandOrGroup",Types=new[]{typeof(Group),typeof(Command)}},new(){Key="Enable",Types=new[]{typeof(bool?)},Optional=true}};public override async Task Run(MessageContext ctx){var isGroup=ctx.GetArg<Group>("CommandOrGroup",out var group);var enable=ctx.GetArg<bool?>("Enable");var provider=ctx.Extension.Provider;if(provider is null){await ctx.ReplyAsync("No Provider is registered!");return;}if(isGroup){var enabled=provider.Get(ctx.Guild).Groups.First(x=>x.Key.Name==group.Name).Value;if(enable is null)await ctx.ReplyAsync($"The Group {@group.Name} is {(enabled?"Enabled":"Disabled")} in {ctx.Guild.Name}");else if(!@group.Guarded){ctx.Extension.GroupStatusChanged(ctx.Guild,@group,(bool)enable);await ctx.ReplyAsync($"Group {@group.Name} was {((bool)enable?"Enabled":"Disabled")}");}else await ctx.ReplyAsync($"Group {@group.Name} is guarded :|");}else{var command=ctx.GetArg<Command>("CommandOrGroup");var enabled=provider.Get(ctx.Guild).Commands.First(x=>x.Key.Name==command.Name).Value;if(enable is null)await ctx.ReplyAsync($"The Command {command.Name} is {(enabled?"Enabled":"Disabled")} in {ctx.Guild.Name}");else if(!(command.Guarded||command.Group.Guarded)){ctx.Extension.CommandStatusChanged(ctx.Guild,command,(bool)enable);await ctx.ReplyAsync($"Command {command.Name} was {((bool)enable?"Enabled":"Disabled")}");}else await ctx.ReplyAsync($"Command {command.Name} is guarded :|");}}public override async Task Run(InteractionContext ctx){var isGroup=ctx.GetArg<Group>("CommandOrGroup",out var group);var enable=ctx.GetArg<bool?>("Enable");var provider=ctx.Extension.Provider;if(provider is null){await ctx.ReplyAsync("No Provider is registered!");return;}if(isGroup){var enabled=provider.Get(ctx.Guild).Groups.First(x=>x.Key.Name==group.Name).Value;if(enable is null)await ctx.ReplyAsync($"The Group {@group.Name} is {(enabled?"Enabled":"Disabled")} in {ctx.Guild.Name}");else if(!@group.Guarded){ctx.Extension.GroupStatusChanged(ctx.Guild,@group,(bool)enable);await ctx.ReplyAsync($"Group {@group.Name} was {((bool)enable?"Enabled":"Disabled")}");}else await ctx.ReplyAsync($"Group {@group.Name} is guarded :|");}else{var command=ctx.GetArg<Command>("CommandOrGroup");var enabled=provider.Get(ctx.Guild).Commands.First(x=>x.Key.Name==command.Name).Value;if(enable is null)await ctx.ReplyAsync($"The Command {command.Name} is {(enabled?"Enabled":"Disabled")} in {ctx.Guild.Name}");else if(!(command.Guarded||command.Group.Guarded)){ctx.Extension.CommandStatusChanged(ctx.Guild,command,(bool)enable);await ctx.ReplyAsync($"Command {command.Name} was {((bool)enable?"Enabled":"Disabled")}");}else await ctx.ReplyAsync($"Command {command.Name} is guarded :|");}}public Enabled(DiscordClient client):base(client){}}}namespace Commands.Commands.Commands{public class Eval:Command{public override string GroupName=>"Commands";public override string Description=>"eval code idk";public override bool RegisterSlashCommand=>false;public override bool OwnerOnly=>true;public override Argument[]Arguments=>new Argument[]{new(){Key="Code",Infinite=true}};public override async Task Run(MessageContext ctx){var prefix=ctx.Extension.Provider?.Get(ctx.Guild)!.Prefix??ctx.Extension.CommandPrefix;var cs=ctx.RawArgString;if(cs.ToLower().Contains("process")||cs.ToLower().Contains("shutdown")){await ctx.ReplyAsync("no.");return;}if(ctx.Message.ReferencedMessage is null&&ctx.Message.Content.Length>prefix.Length+4){await EvalCSharpCode(cs,ctx.Message);return;}var code=ctx.Message.ReferencedMessage?.Content??ctx.Message.Content;if(!(code?.Contains(prefix)??false)){await EvalCSharpCode(code,ctx.Message);return;}var index=code.IndexOf(' ');code=code[++index..];await EvalCSharpCode(code,ctx.Message);}public override Task Run(InteractionContext ctx)=>Task.CompletedTask;private async Task EvalCSharpCode(string code,DiscordMessage message){var cs1=code.IndexOf("```",StringComparison.Ordinal)+3;cs1=code.IndexOf(' ',cs1)+1;var cs2=code.LastIndexOf("```",StringComparison.Ordinal);if(cs1 is-1||cs2 is-1){cs1=0;cs2=code.Length;}var cs=code.Substring(cs1,cs2-cs1);var msg=await message.ReplyAsync("",new DiscordEmbedBuilder().WithColor(new DiscordColor("2F3136")).WithDescription("Evaluating...").Build());try{var globals=new MessageContext{Client=Client,Message=message};var sopts=ScriptOptions.Default;sopts=sopts.WithImports("System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks","DSharpPlus","DSharpPlus.Entities","Microsoft.Extensions.Logging","Commands.Utils","Commands","Commands.CommandsStuff","Commands.Data","Commands.Types");var asm=AppDomain.CurrentDomain.GetAssemblies().Where(xa=>!xa.IsDynamic&&!string.IsNullOrWhiteSpace(xa.Location));sopts=sopts.WithReferences(asm);var script=CSharpScript.Create(cs,sopts,typeof(MessageContext));script.Compile();var result=await script.RunAsync(globals);if(result?.ReturnValue is DiscordEmbedBuilder or DiscordEmbed)await msg.ModifyAsync(m=>m.WithEmbed(result.ReturnValue as DiscordEmbedBuilder??result.ReturnValue as DiscordEmbed));else if(result?.ReturnValue is not null&&!string.IsNullOrWhiteSpace(result.ReturnValue.ToString()))await msg.ModifyAsync(new DiscordEmbedBuilder{Title="Evaluation Result",Description=result.ReturnValue.ToString(),Color=new DiscordColor("2F3136"),}.Build());else await msg.ModifyAsync(new DiscordEmbedBuilder{Title="Evaluation Successful",Description="No result was returned.",Color=new DiscordColor("2F3136")}.Build());}catch(Exception ex){await msg.ModifyAsync(new DiscordEmbedBuilder{Title="Evaluation Failure",Description=$"**{ex.GetType()}**: {ex.Message.Split('\n')[0]}",Color=new DiscordColor("2F3136")}.Build());}}public Eval(DiscordClient client):base(client){}}}namespace Commands.Commands.DebugCommands{public class TestDiscordUserArg:Command{public override string GroupName=>"Debug";public override string Description=>"test";public override Argument[]Arguments=>new Argument[]{new(){Key="User",Description="yes"}};public override async Task Run(MessageContext ctx){var user=ctx.GetArg<DiscordUser>("User");await ctx.ReplyAsync(user?.Id.ToString()??"null");}public override async Task Run(InteractionContext ctx){var user=ctx.GetArg<DiscordUser>("User");await ctx.ReplyAsync(user?.Id.ToString()??"null");}public TestDiscordUserArg(DiscordClient client):base(client){}}}namespace Commands.Commands.Utils{public class Help:Command{public override string GroupName=>"Utils";public override string Description=>"just your everyday help command";public override string[]Examples=>new[]{"help","help prefix"};public override bool Guarded=>true;public override Argument[]Arguments=>new Argument[]{new(){Key="CommandOrGroup",Types=new[]{typeof(Command),typeof(Group)},Optional=true}};public override async Task Run(MessageContext ctx){var isCommand=ctx.GetArg<Command>("CommandOrGroup",out var command);ctx.GetArg<Group>("CommandOrGroup",out var group);var showAll=command is null&&group is null;if(showAll)await ctx.ReplyAsync(ProcessAllCommands(ctx.Guild,ctx.Author,ctx.Message.Id,ctx.Message.EditedTimestamp));else if(isCommand)await ctx.ReplyAsync(ProcessCommand(ctx.Guild,ctx.Author,command));else await ctx.ReplyAsync(GetGroupEmbed(group,ctx.Guild,ctx.Author));}public override async Task Run(InteractionContext ctx){var isCommand=ctx.GetArg<Command>("CommandOrGroup",out var command);ctx.GetArg<Group>("CommandOrGroup",out var group);var showAll=command is null&&group is null;if(showAll)await ctx.ReplyAsync(ProcessAllCommands(ctx.Guild,ctx.Author,ctx.Interaction.Id,DateTimeOffset.Now));else if(isCommand)await ctx.ReplyAsync(ProcessCommand(ctx.Guild,ctx.Author,command));else await ctx.ReplyAsync(GetGroupEmbed(group,ctx.Guild,ctx.Author));}private DiscordEmbedBuilder ProcessCommand(DiscordGuild guild,DiscordUser user,Command command){try{var currentUser=Client.CurrentUser;var mentionPrefix=$"@{currentUser.Username}#{currentUser.Discriminator} ";var prefix=Extension.Provider.Get(guild).Prefix;if(string.IsNullOrEmpty(prefix))prefix=Extension.CommandPrefix;var format=$"`{prefix}{command.Name}";if(command.Arguments is not null){foreach(var commandArgument in command.Arguments){if(commandArgument.Optional)format+=$" [{commandArgument.Key}]";else format+=$" <{commandArgument.Key}>";}}format+=$"` or {format.Replace(prefix,mentionPrefix)}`";var embed=new DiscordEmbedBuilder{Footer=new DiscordEmbedBuilder.EmbedFooter{Text=$"Requested by {user.Username}",IconUrl=user.AvatarUrl},Title="Help Menu",Timestamp=DateTimeOffset.Now,Description=$"Command **{command.Name}**: {command.Description}\n\n"+$"**Format**: {format}\n"+$"{(command.Aliases is not null?$"**Aliases**: {string.Join(", ",command.Aliases)}\n":"")}"+$"**Group**: {command.Group.Name}(`{command.Group.Id}:{command.MemberName}`)\n"+$"{(command.DetailedDescription is not null?$"**Details**: {command.DetailedDescription}\n":"")}"+$"{(command.Examples is not null?$"**Examples**:\n{string.Join("\n",command.Examples)}\n":"")}",Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};return embed;}catch(Exception e){Logger.Error(e);throw;}}private DiscordMessageBuilder ProcessAllCommands(DiscordGuild guild,DiscordUser user,ulong id,DateTimeOffset?editedTimeProtectionIdk){var groups=Extension.Registry.Groups;var currentUser=Client.CurrentUser;var privateChannel=guild is null;var mentionPrefix=$"@{currentUser.Username}#{currentUser.Discriminator}";var prefix=Extension.Provider.Get(guild).Prefix;if(string.IsNullOrEmpty(prefix))prefix=Extension.CommandPrefix;var completePrefixString=privateChannel?$"`{mentionPrefix} command`":$"`{mentionPrefix} command` or `{prefix} command`";var description=$"To run a command in {(privateChannel?"any server":guild.Name)}, use {completePrefixString}. For example, {completePrefixString.Replace("command","prefix")}\nTo run a command in DMs simply use `command` with no prefix\n\n Use `help <command>` to view detailed information about a specific command.\n\n\n__**Available Commands in {(privateChannel?"this DM":guild.Name)}**__";var embed=new DiscordEmbedBuilder{Footer=new DiscordEmbedBuilder.EmbedFooter{Text=$"Requested by {user.Username}",IconUrl=user.AvatarUrl},Title="Help Menu",Timestamp=DateTimeOffset.Now,Description=description,Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};foreach(var group in groups){var commandInfo=string.Join("\n",group.Commands.Where(x=>!x.Hidden).Select(x=>$"**{x.Name}**: {x.Description}").ToArray());if(string.IsNullOrWhiteSpace(commandInfo))continue;embed.AddField(group.Name,commandInfo,true);}var component=new DiscordSelectComponent($"helpCommandSelect_{id}_{editedTimeProtectionIdk}","Group",groups.Select(x=>new DiscordSelectComponentOption(x.Name,x.Name)));async void Listener(ComponentInteractionCreateEventArgs args){var group=Extension.Registry.Groups.First(x=>string.Equals(x.Name,args.Values[0],StringComparison.CurrentCultureIgnoreCase));await args.Interaction.FollowUpAsync(GetGroupEmbed(group,args.Interaction.Channel.Guild,args.Interaction.User));}component.AddListener(Listener,Extension.Dispatcher);return new DiscordMessageBuilder().AddEmbed(embed).AddComponents(component);}private DiscordEmbed GetGroupEmbed(Group group,DiscordGuild guild,DiscordUser user){var embed=new DiscordEmbedBuilder{Footer=new DiscordEmbedBuilder.EmbedFooter{Text=$"Requested by {user.Username}",IconUrl=user.AvatarUrl},Title="Help Menu",Timestamp=DateTimeOffset.Now,Description=$"Group `{group.Name}`\nDescription:`{group.Description}`",Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};var currentUser=Client.CurrentUser;var mentionPrefix=$"@{currentUser.Username}#{currentUser.Discriminator} ";var prefix=Extension.Provider.Get(guild).Prefix??Extension.CommandPrefix;foreach(var command in group.Commands){var format=$"`{prefix}{command.Name}";if(command.Arguments is not null){foreach(var commandArgument in command.Arguments){if(commandArgument.Optional)format+=$" [{commandArgument.Key}]";else format+=$" <{commandArgument.Key}>";}}format+=$"` or {format.Replace(prefix,mentionPrefix)}`";embed.AddField(command.Name,$"Command **{command.Name}**: {command.Description}\n\n"+$"**Format**: {format}\n"+$"{(command.Aliases is not null?$"**Aliases**: {string.Join(", ",command.Aliases)}\n":"")}"+$"**Group**: {command.Group.Name}(`{command.Group.Id}:{command.MemberName}`)\n"+$"{(command.DetailedDescription is not null?$"**Details**: {command.DetailedDescription}\n":"")}"+$"{(command.Examples is not null?$"**Examples**:\n{string.Join("\n",command.Examples)}\n":"")}");}return embed;}public Help(DiscordClient client):base(client){}}}namespace Commands.Commands.Utils{public class Ping:Command{public Ping(DiscordClient client):base(client){}public override string GroupName=>"Utils";public override string[]Aliases=>new[]{"latency"};public override ThrottlingOptions ThrottlingOptions=>new(){Usages=2,Duration=20};public override string Description=>"Ping, thats about it, yeah";public override async Task Run(MessageContext ctx){await ctx.ReplyAsync($"The bot's ping is {ctx.Client.Ping}ms");}public override async Task Run(InteractionContext ctx){await ctx.ReplyAsync($"The bot's ping is {ctx.Client.Ping}ms");}}}namespace Commands.Commands.Utils{public class Poll:Command{public override string GroupName=>"Utils";public override string Description=>"make a poll idk";public override Argument[]Arguments=>new Argument[]{new(){Key="Description"},new(){Key="Choice1",Types=new[]{typeof(string)}},new(){Key="Choice2",Types=new[]{typeof(string)}},new(){Key="Choice3",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice4",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice5",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice6",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice7",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice8",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice9",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice10",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice11",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice12",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice13",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice14",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice15",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice16",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice17",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice18",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice19",Optional=true,Types=new[]{typeof(string)}},new(){Key="Choice20",Optional=true,Types=new[]{typeof(string)}},};public override async Task Run(MessageContext ctx){var choices=Arguments.Select(x=>ctx.GetArg<string>(x.Key)).ToArray()[1..].Where(x=>!string.IsNullOrWhiteSpace(x)).ToList();var description=ctx.GetArg<string>("Description");var votes=Enumerable.Repeat(0,choices.Count).ToList();var pollData=new PollData{Choices=choices,Votes=votes,Voters=votes.Select(_=>Array.Empty<DiscordUser>()).ToList()};var actionsRowsRequired=choices.Count%5==0?choices.Count/5:choices.Count/5+1;var actionsRows=new List<DiscordActionRowComponent>();for(var i=0;i<actionsRowsRequired;i++){var numberOfButtonsInThisRow=i==actionsRowsRequired-1?choices.Count-i*5:5;var buttons=new List<DiscordButtonComponent>();for(var j=0;j<numberOfButtonsInThisRow;j++){var button=new DiscordButtonComponent(ButtonStyle.Primary,$"pollbutton_{choices[i*5+j]}_{i*5+j}_{ctx.Message.Id}_{ctx.Message.EditedTimestamp}",choices[i*5+j]);var j1=j;var i1=i;async void Listener(ComponentInteractionCreateEventArgs args){var result=pollData.VoteFor(choices[i1*5+j1],args.Message.Author);switch(result){case 0:await args.Interaction.FollowUpAsync("You have already voted for something, might wanna _unvote_ that idk");break;case-1:await args.Interaction.FollowUpAsync("_unvoted_ xd");break;case 1:await args.Interaction.FollowUpAsync("yes milk");break;}if(result==0)return;var embed=new DiscordEmbedBuilder{Title=description,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=ctx.Author.AvatarUrl,Text=$"{ctx.Author.Username}#{ctx.Author.Discriminator}"},Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};foreach(var choice in choices){embed.AddField(choice,pollData.Votes[pollData.Choices.IndexOf(choice)].ToString(),true);}await args.Message.ModifyAsync(x=>x.AddEmbed(embed).AddComponents(args.Message.Components));}button.AddListener(Listener,ctx.Extension.Dispatcher);buttons.Add(button);}var actionRow=new DiscordActionRowComponent(buttons);actionsRows.Add(actionRow);}var endPollButton=new DiscordButtonComponent(ButtonStyle.Danger,$"pollclose_{ctx.Message.Id}_{ctx.Message.EditedTimestamp}","End Poll");async void EndPollListener(ComponentInteractionCreateEventArgs args){var embed=new DiscordEmbedBuilder{Title=description,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=ctx.Author.AvatarUrl,Text=$"{ctx.Author.Username}#{ctx.Author.Discriminator}"},Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};foreach(var choice in choices){embed.AddField(choice,pollData.Votes[pollData.Choices.IndexOf(choice)].ToString(),true);}await args.Message.ModifyAsync(x=>x.WithEmbed(embed));await args.Message.Channel.SendMessageAsync(embed);}endPollButton.AddListener(EndPollListener,ctx.Extension.Dispatcher);actionsRows.Add(new DiscordActionRowComponent(new[]{endPollButton}));var embed=new DiscordEmbedBuilder{Title=description,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=ctx.Author.AvatarUrl,Text=$"{ctx.Author.Username}#{ctx.Author.Discriminator}"}};foreach(var choice in choices){embed.AddField(choice,"0",true);}await ctx.ReplyAsync(new DiscordMessageBuilder().AddComponents(actionsRows).AddEmbed(embed));}public override async Task Run(InteractionContext ctx){var choices=Arguments.Select(x=>ctx.GetArg<string>(x.Key)).ToArray()[1..].Where(x=>!string.IsNullOrEmpty(x)).ToList();var description=ctx.GetArg<string>("Description");var votes=Enumerable.Repeat(0,choices.Count).ToList();var pollData=new PollData{Choices=choices,Votes=votes,Voters=votes.Select(_=>Array.Empty<DiscordUser>()).ToList()};var actionsRowsRequired=choices.Count%5==0?choices.Count/5:choices.Count/5+1;var actionsRows=new List<DiscordActionRowComponent>();for(var i=0;i<actionsRowsRequired;i++){var numberOfButtonsInThisRow=i==actionsRowsRequired-1?choices.Count-i*5:5;var buttons=new List<DiscordButtonComponent>();for(var j=0;j<numberOfButtonsInThisRow;j++){var button=new DiscordButtonComponent(ButtonStyle.Primary,$"pollbutton_{choices[i*5+j]}_{i*5+j}_{ctx.Interaction.Id}_{DateTime.Now}",choices[i*5+j]);var j1=j;var i1=i;async void Listener(ComponentInteractionCreateEventArgs args){var result=pollData.VoteFor(choices[i1*5+j1],args.Message.Author);switch(result){case 0:await args.Interaction.FollowUpAsync("You have already voted for something, might wanna _unvote_ that idk");break;case-1:await args.Interaction.FollowUpAsync("_unvoted_ xd");break;case 1:await args.Interaction.FollowUpAsync("yes milk");break;}if(result==0)return;var embed=new DiscordEmbedBuilder{Title=description,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=ctx.Author.AvatarUrl,Text=$"{ctx.Author.Username}#{ctx.Author.Discriminator}"},Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};foreach(var choice in choices){embed.AddField(choice,pollData.Votes[pollData.Choices.IndexOf(choice)].ToString(),true);}await args.Message.ModifyAsync(x=>x.AddEmbed(embed).AddComponents(args.Message.Components));}button.AddListener(Listener,ctx.Extension.Dispatcher);buttons.Add(button);}var actionRow=new DiscordActionRowComponent(buttons);actionsRows.Add(actionRow);}var endPollButton=new DiscordButtonComponent(ButtonStyle.Danger,$"pollclose_{ctx.Interaction.Id}_{DateTime.Now}","End Poll");async void EndPollListener(ComponentInteractionCreateEventArgs args){var embed=new DiscordEmbedBuilder{Title=description,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=ctx.Author.AvatarUrl,Text=$"{ctx.Author.Username}#{ctx.Author.Discriminator}"},Color=new Optional<DiscordColor>(new DiscordColor("2F3136"))};foreach(var choice in choices){embed.AddField(choice,pollData.Votes[pollData.Choices.IndexOf(choice)].ToString(),true);}await args.Message.ModifyAsync(x=>x.WithEmbed(embed));await args.Message.Channel.SendMessageAsync(embed);await args.Interaction.FollowUpAsync("killed the pol");}endPollButton.AddListener(EndPollListener,ctx.Extension.Dispatcher);actionsRows.Add(new DiscordActionRowComponent(new[]{endPollButton}));var embed=new DiscordEmbedBuilder{Title=description,Footer=new DiscordEmbedBuilder.EmbedFooter{IconUrl=ctx.Author.AvatarUrl,Text=$"{ctx.Author.Username}#{ctx.Author.Discriminator}"}};foreach(var choice in choices){embed.AddField(choice,"0",true);}await ctx.ReplyAsync("Sent a new poll");await ctx.Channel.SendMessageAsync(new DiscordMessageBuilder().AddComponents(actionsRows).AddEmbed(embed));}public Poll(DiscordClient client):base(client){}}public class PollData{public List<string>Choices{get;init;}=new();public List<int>Votes{get;init;}=new();public List<DiscordUser[]>Voters{get;init;}=new();public int VoteFor(string choice,DiscordUser user){var voters=Voters[Choices.IndexOf(choice)];if(voters.Contains(user)){Votes[Voters.IndexOf(voters)]--;var temp=Voters[Choices.IndexOf(choice)].ToList();temp.Remove(user);Voters[Choices.IndexOf(choice)]=temp.ToArray();return-1;}var userHasVotedForAnyOption=Voters.SelectMany(x=>x).ToArray().Contains(user);if(userHasVotedForAnyOption)return 0;Votes[Choices.IndexOf(choice)]++;var temp2=Voters[Choices.IndexOf(choice)].ToList();temp2.Add(user);Voters[Choices.IndexOf(choice)]=temp2.ToArray();return 1;}}}namespace Commands.Commands.Utils{public class Prefix:Command{public override string GroupName=>"Utils";public override string Description=>"prefix command to chnage prefix ig idk";public override Argument[]Arguments=>new Argument[]{new(){Key="Prefix",Optional=true,Types=new[]{typeof(string)}}};public override async Task Run(MessageContext ctx){var prefix=ctx.GetArg<string>("Prefix");var shouldSetNewPrefix=!string.IsNullOrWhiteSpace(prefix);var provider=ctx.Extension.Provider;if(shouldSetNewPrefix){if(provider is not null){if(ctx.Guild is not null){_=Task.Run(async()=>{ctx.Extension.CommandPrefixChanged(ctx.Guild,prefix);await ctx.ReplyAsync($"Set the command prefix to {prefix}");});}else await ctx.ReplyAsync("Cant Set a prefix in DMs!");}else await ctx.ReplyAsync("No Settings Provider is registered!");}else if(provider is not null)await ctx.ReplyAsync($"The prefix in {(ctx.Guild is null?"DMs":ctx.Guild.Name)} is {(ctx.Guild is null?$"`@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator}`":$"`{(provider.Get(ctx.Guild))?.Prefix??ctx.Extension.CommandPrefix}` or `@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator}`")}");else await ctx.ReplyAsync($"The prefix in {(ctx.Guild is null?"DMs":ctx.Guild.Name)} is {(ctx.Guild is null?$"`@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator}`":$"`{ctx.Extension.CommandPrefix}` or `@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator}`")}");}public override async Task Run(InteractionContext ctx){var prefix=ctx.GetArg<string>("Prefix");var shouldSetNewPrefix=!string.IsNullOrWhiteSpace(prefix);var provider=ctx.Extension.Provider;if(shouldSetNewPrefix){if(provider is not null){if(ctx.Guild is not null){var settings=provider.Get(ctx.Guild);settings.Prefix=prefix;ctx.Extension.CommandPrefixChanged(ctx.Guild,prefix);await ctx.ReplyAsync($"Set the command prefix to {prefix}");}else await ctx.ReplyAsync("Cant Set a prefix in DMs!");}else await ctx.ReplyAsync("No Settings Provider is registered!");}else if(provider is not null)await ctx.ReplyAsync($"The prefix in {(ctx.Guild is null?"DMs":ctx.Guild.Name)} is `{(provider.Get(ctx.Guild))?.Prefix??ctx.Extension.CommandPrefix}` or `@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator}`");else await ctx.ReplyAsync($"The prefix in {(ctx.Guild is null?"DMs":ctx.Guild.Name)} is `{ctx.Extension.CommandPrefix}` or `@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator}`");}public Prefix(DiscordClient client):base(client){}}}namespace Commands.Commands.Utils{public class UnknownCommand:Command{public override string GroupName=>"Utils";public override bool Unknown=>true;public override bool Hidden=>true;public override string Description=>"Command for unknown idk";public override async Task Run(MessageContext ctx){var privateChannel=ctx.Guild is null;var extension=ctx.Extension;var prefix=(extension.Provider.Get(ctx.Guild)).Prefix;var command=privateChannel?"`help`":$"`{prefix}help` or `@{ctx.Client.CurrentUser.Username}#{ctx.Client.CurrentUser.Discriminator} help`";var replyString=$"Unknown Command. Use {command} to get the command list";await ctx.ReplyAsync(replyString);}public override Task Run(InteractionContext ctx)=>Task.CompletedTask;public UnknownCommand(DiscordClient client):base(client){}}}namespace Commands.CommandsStuff{public class Argument{public string Key{get;set;}public string Description{get;set;}public Type[]Types{get;set;}public bool Optional{get;set;}public string Default{get;set;}public string[]OneOf{get;set;}public bool Infinite{get;set;}public void Deconstruct(out string key,out string description,out Type[]types,out bool optional,out string@default,out string[]oneOf,out bool infinite){key=Key;description=Description;types=Types;optional=Optional;@default=Default;oneOf=OneOf;infinite=Infinite;}}}namespace Commands.CommandsStuff{public class ArgumentCollector{public Dictionary<string,object>Args{get;set;}=new();public object this[string key]{get=>Args.ContainsKey(key)?Args[key]:null;set{if(Args.ContainsKey(key))Args[key]=value;else Args.Add(key,value);}}public T Get<T>(string key)=>this[key]is T t?t:default;public bool Get<T>(string key,out T t){var flag=this[key]is T;t=this[key]is T t1?t1:default;return flag;}}}namespace Commands.CommandsStuff{public class ArgumentParser:CommandsBase{private CommandRegistry Registry{get;}public ArgumentParser(DiscordClient client,CommandRegistry registry):base(client)=>Registry=registry;public ArgumentCollector Parse<T>(string[]words,Command command,T interactionOrMessage){var collector=new ArgumentCollector();var commandArgs=command.Arguments?.ToList();var isInteraction=interactionOrMessage is DiscordInteraction;if(commandArgs is null||!commandArgs.Any())return collector;var parserData=ArgumentParserData.From(words,command,isInteraction);var(_,_,_,slashCommandShiftedArgs)=parserData;var inputArgs=slashCommandShiftedArgs[..];foreach(var argument in commandArgs){var index=commandArgs.IndexOf(argument);var(key,description,types,optional,@default,oneOf,infinite)=argument;var argumentStringProvided=string.Empty;try{argumentStringProvided=infinite?string.Join(" ",inputArgs[index..]):inputArgs[index];}catch{if(optional&&@default is null)continue;}if((types?.Length??0)==0)types=new[]{typeof(string)};if(!oneOf?.Select(x=>x.ToLower()).Contains(argumentStringProvided.ToLower())==true){if(!optional)throw new FriendlyException($"Argument `{key}`(`{description}`) should be one of `{string.Join(", ",oneOf)}`");var temp=inputArgs.ToList();if(temp.Count!=0)temp.Insert(commandArgs.IndexOf(argument)+1,string.IsNullOrEmpty(argumentStringProvided)?"_":argumentStringProvided);if(@default is not null){var argumentTypeObject=Registry.GetArgumentTypeFromReturnType(types.First());var(_,parseMethod,_)=GetMethods(argumentTypeObject);var parseResult=parseMethod.Invoke(argumentTypeObject,new object[]{@default});collector[key]=parseResult;}inputArgs=temp.ToArray();continue;}foreach(var type in types){var argumentTypeObject=Registry.GetArgumentTypeFromReturnType(type);var(validateMethod,parseMethod,isEmptyMethod)=GetMethods(argumentTypeObject);var validateResult=(bool)validateMethod.Invoke(argumentTypeObject,new object[]{argumentStringProvided})!;if(!validateResult){if(!optional&&type==types.Last()&&@default is not null){if(isInteraction)Extension.CommandCanceled(command,"INVALID_ARGS",interactionOrMessage as DiscordInteraction);else Extension.CommandCanceled(command,"INVALID_ARGS",interactionOrMessage as DiscordMessage);throw new FriendlyException($"Invalid value (`{(string.IsNullOrEmpty(argumentStringProvided)?"null":argumentStringProvided)}`) for `{key}`(`{description??"there aint no description for this arg, cuz toasty lazy"}`)");}if(type!=types.Last())continue;var temp=inputArgs.ToList();try{temp.Insert(index+1,inputArgs[index]);}catch{}if(@default is not null){var parseResultDefault=parseMethod.Invoke(argumentTypeObject,new object[]{@default});collector[key]=parseResultDefault;break;}inputArgs=temp.ToArray();break;}var parseResult=parseMethod.Invoke(argumentTypeObject,new object[]{argumentStringProvided});var isEmpty=(bool)isEmptyMethod.Invoke(argumentTypeObject,new[]{parseResult})!;if(isEmpty&&@default is not null)collector[key]=parseMethod.Invoke(argumentTypeObject,new object[]{@default});else collector[key]=parseResult;break;}if(infinite)break;}return collector;}private(MethodInfo,MethodInfo,MethodInfo)GetMethods(ArgumentType argumentType){var type=argumentType.GetType();var validate=type.GetMethod(nameof(ArgumentType.Validate));var parse=type.GetMethod(nameof(ArgumentType<bool>.Parse));var isEmpty=type.GetMethod(nameof(ArgumentType<bool>.IsEmpty));return(validate,parse,isEmpty);}}}namespace Commands.CommandsStuff{public readonly struct ArgumentParserData{public List<Argument>NonOptionalArgs{get;init;}public List<Argument>OptionalArgs{get;init;}public bool InvalidNumberOfArgs{get;init;}public string[]SlashCommandShiftedArgs{get;init;}public static ArgumentParserData From(string[]input,Command command,bool isSlashCommand){var commandArgs=command.Arguments;var nonOptionalArgs=command.Arguments.Where(x=>!x.Optional).ToList();var optionalArgs=command.Arguments.Where(x=>x.Optional).ToList();var invalidNumberOfArgs=nonOptionalArgs.Count>input.Length;if(!isSlashCommand){return new ArgumentParserData{NonOptionalArgs=nonOptionalArgs,OptionalArgs=optionalArgs,InvalidNumberOfArgs=invalidNumberOfArgs,SlashCommandShiftedArgs=input[1..]};}var repeatCount=nonOptionalArgs.Count+optionalArgs.Count-input.Length;var tempInput=input.ToList();tempInput.AddRange(Enumerable.Repeat<string>(null,repeatCount));for(var i=0;i<command.Arguments.Length;i++){var optional=command.Arguments[i].Optional;if(!optional)continue;var indexInOptionalArgs=optionalArgs.IndexOf(commandArgs[i]);if(indexInOptionalArgs==-1)indexInOptionalArgs=0;var argsAtThatPos=tempInput[^(optionalArgs.Count-indexInOptionalArgs)];tempInput.Remove(argsAtThatPos);tempInput.Insert(i,argsAtThatPos);}return new ArgumentParserData{NonOptionalArgs=nonOptionalArgs,OptionalArgs=optionalArgs,InvalidNumberOfArgs=invalidNumberOfArgs,SlashCommandShiftedArgs=tempInput.ToArray()};}public void Deconstruct(out List<Argument>nonOptionalArgs,out List<Argument>optionalArgs,out bool invalidNumberOfArgs,out string[]slashCommandShiftedArgs){nonOptionalArgs=NonOptionalArgs;optionalArgs=OptionalArgs;invalidNumberOfArgs=InvalidNumberOfArgs;slashCommandShiftedArgs=SlashCommandShiftedArgs;}}}namespace Commands.CommandsStuff{public abstract class Command:CommandsBase{public static readonly List<Command>Commands=new();public Group Group{get;set;}public virtual string Name=>GetType().Name;public virtual bool RegisterSlashCommand=>true;public virtual string[]Aliases=>null;public abstract string GroupName{get;}public virtual string MemberName=>GetType().Name;public virtual string Description=>null;public virtual string DetailedDescription=>null;public virtual string[]Examples=>null;public virtual bool GuildOnly=>false;public virtual bool OwnerOnly=>false;public virtual Permissions ClientPermissions=>Permissions.None;public virtual Permissions UserPermissions=>Permissions.None;public virtual bool Nsfw=>false;public virtual ThrottlingOptions ThrottlingOptions=>null;public virtual Argument[]Arguments=>null;public virtual bool Guarded=>false;public virtual bool Hidden=>false;public virtual bool Unknown=>false;public abstract Task Run(MessageContext ctx);public abstract Task Run(InteractionContext ctx);public override string ToString()=>$"{Group.Id}:{Name}";public static implicit operator Command(string s)=>Commands.First(x=>$"{x.Group.Id}:{x.Name}"==s||x.Name==s);public virtual async Task OnBlock(DiscordMessage message,string reason,Permissions missingUserPermissions=Permissions.None,Permissions missingClientPermissions=Permissions.None,uint seconds=0){switch(reason){case"GUILD_ONLY":await message.ReplyAsync($"The `{Name}` Command can only be used in a guild");break;case"NSFW":await message.ReplyAsync($"The `{Name}` Command can only be used in Nsfw channels");break;case"USER_PERMISSIONS":await message.ReplyAsync($"You are missing the following permissions for the `{Name}` Command to work:\n`{string.Join(", ",missingUserPermissions)}`");break;case"CLIENT_PERMISSIONS":await message.ReplyAsync($"I need the following permissions to run the `{Name}` Command:\n`{string.Join(", ",missingClientPermissions)}`");break;case"THROTTLING":var minutes=seconds/60;seconds%=60;var hours=minutes/60;minutes%=60;var days=hours/24;hours%=24;var months=days/30;days%=30;var years=months/12;months%=12;var decades=years/10;years%=10;var stuff=new List<string>{decades>0?$"{decades} decades":string.Empty,years>0?$"{years} years":string.Empty,months>0?$"{months} months":string.Empty,days>0?$"{days} days":string.Empty,hours>0?$"{hours} hours":string.Empty,minutes>0?$"{minutes} minutes":string.Empty,seconds>0?$"{seconds} seconds":string.Empty,};stuff=stuff.Where(x=>!string.IsNullOrEmpty(x)).ToList();var finalString=string.Join(", ",stuff);await message.ReplyAsync($"You may not use the `{Name}` command for another {finalString}");break;case"DISABLED":await message.ReplyAsync($"The `{Name}` Command is Disabled!");break;case"GROUP_DISABLED":await message.ReplyAsync($"The `{Group.Name}` Group is Disabled!");break;}}public virtual async Task OnBlock(DiscordInteraction interaction,string reason,Permissions missingUserPermissions=Permissions.None,Permissions missingClientPermissions=Permissions.None,uint seconds=0){switch(reason){case"GUILD_ONLY":await interaction.FollowUpAsync($"The `{Name}` Command can only be used in a guild");break;case"NSFW":await interaction.FollowUpAsync($"The `{Name}` Command can only be used in Nsfw channels");break;case"USER_PERMISSIONS":await interaction.FollowUpAsync($"You are missing the following permissions for the `{Name}` Command to work:\n`{string.Join(", ",missingUserPermissions)}`");break;case"CLIENT_PERMISSIONS":await interaction.FollowUpAsync($"I need the following permissions to run the `{Name}` Command:\n`{string.Join(", ",missingClientPermissions)}`");break;case"THROTTLING":var minutes=seconds/60;seconds%=60;var hours=minutes/60;minutes%=60;var days=hours/24;hours%=24;var months=days/30;days%=30;var years=months/12;months%=12;var decades=years/10;years%=10;var stuff=new List<string>{decades>0?$"{decades} decades":string.Empty,years>0?$"{years} years":string.Empty,months>0?$"{months} months":string.Empty,days>0?$"{days} days":string.Empty,hours>0?$"{hours} hours":string.Empty,minutes>0?$"{minutes} minutes":string.Empty,seconds>0?$"{seconds} seconds":string.Empty,};stuff=stuff.Where(x=>!string.IsNullOrEmpty(x)).ToList();var finalString=string.Join(", ",stuff);await interaction.FollowUpAsync($"You may not use the `{Name}` command for another {finalString}");break;case"DISABLED":await interaction.FollowUpAsync($"The `{Name}` Command is Disabled!");break;case"GROUP_DISABLED":await interaction.FollowUpAsync($"The `{Group.Name}` Group is Disabled!");break;}}public virtual async Task<(bool,string)>HasPermission(DiscordMessage message,bool ownerOverride=false){if(!OwnerOnly&&UserPermissions is Permissions.None&&ClientPermissions is Permissions.None)return(true,null);if(ownerOverride&&Extension.Owners.Contains(message.Author))return(true,null);if(OwnerOnly&&(ownerOverride||!Extension.Owners.Contains(message.Author)))return(false,$"OWNER_ONLY");var missingClientPermissions=(message.Channel.Guild.Members[Client.CurrentUser.Id].PermissionsIn(message.Channel)^ClientPermissions)&ClientPermissions;var missingUserPermissions=(message.Channel.Guild.Members[Client.CurrentUser.Id].PermissionsIn(message.Channel)^UserPermissions)&UserPermissions;if(missingClientPermissions is not Permissions.None)return(false,"CLIENT_PERMISSIONS");if(missingUserPermissions is not Permissions.None)return(false,"USER_PERMISSIONS");return(true,null);}public Throttle GetThrottle(DiscordUser user)=>_throttling.ContainsKey(user.Id)?_throttling[user.Id]:null;public virtual async Task<(bool,string)>IsUsable(DiscordMessage message){if(GuildOnly&&message.Channel.Guild is null)return(false,"GUILD_ONLY");var(hasPermission,response)=await HasPermission(message);if(!hasPermission)return(false,response);if(Nsfw&&!message.Channel.IsNSFW)return(false,"NSFW");try{var entity=Extension.Provider.Get(message.Channel.Guild);if(entity.Commands.All(x=>x.Key.Name!=Name)||entity.Groups.All(x=>x.Key.Name!=Group.Name))throw new Exception("idk this guy");if(entity.Commands.Any(x=>!x.Value&&x.Key.Name==Name))return(false,"DISABLED");if(entity.Groups.Any(x=>!x.Value&&x.Key.Name==Group.Name))return(false,"GROUP_DISABLED");}catch(Exception e){Logger.Error(e);if(Extension.Provider.Get(message.Channel.Guild).Commands.All(x=>x.Key.Name!=Name)){var guildSettings=Extension.Provider.Get(message.Channel.Guild);guildSettings.Commands.Add(new DisabledCommandEntity{Name=Name,GuildId=message.Channel?.Guild?.Id??0},true);Extension.Provider.Update(message.Channel.Guild,guildSettings);Logger.LogWarning("Command was not in DB, added it");}if(Extension.Provider.Get(message.Channel.Guild).Groups.All(x=>x.Key.Name!=Group.Name)){var guildSettings=Extension.Provider.Get(message.Channel.Guild);guildSettings.Groups.Add(new DisabledGroupEntity{Name=Group.Name,GuildId=message.Channel?.Guild?.Id??0},true);Extension.Provider.Update(message.Channel.Guild,guildSettings);Logger.LogWarning("Group was not in DB, added it");}return(true,null);}if(GetThrottle(message.Author)is not null)return(false,"THROTTLING");return(true,null);}public void Throttle(DiscordUser user){if(ThrottlingOptions is null||Extension.Owners.Contains(user))return;var throttleExists=_throttling.ContainsKey(user.Id);Throttle throttle;if(throttleExists)throttle=_throttling[user.Id];else throttle=new Throttle{Start=DateTime.Now,Usages=0,Timeout=Task.Delay((int)(ThrottlingOptions.Duration*1000)).ContinueWith(_=>_throttling.Remove(user.Id))};if(!_throttling.ContainsValue(throttle))_throttling.Add(user.Id,throttle);}private Dictionary<ulong,Throttle>_throttling=new();public virtual async Task<(bool,string)>IsUsable(DiscordInteraction interaction){if(GuildOnly&&interaction.Channel.Guild is null)return(false,"GUILD_ONLY");var(hasPermission,response)=await HasPermission(interaction);if(!hasPermission)return(false,response);if(Nsfw&&!interaction.Channel.IsNSFW)return(false,"NSFW");try{var entity=Extension.Provider.Get(interaction.Guild);if(entity.Commands.All(x=>x.Key.Name!=Name)||entity.Groups.All(x=>x.Key.Name!=Group.Name))throw new Exception("idk this guy");if(entity.Commands.Any(x=>!x.Value&&x.Key.Name==Name))return(false,"DISABLED");if(entity.Groups.Any(x=>!x.Value&&x.Key.Name==Group.Name))return(false,"GROUP_DISABLED");}catch(Exception e){Logger.Error(e);return(true,null);}if(GetThrottle(interaction.User)is not null)return(false,"THROTTLING");return(true,null);}public virtual async Task<(bool,string)>HasPermission(DiscordInteraction interaction,bool ownerOverride=true){if(!OwnerOnly&&UserPermissions is Permissions.None&&ClientPermissions is Permissions.None)return(true,null);if(ownerOverride&&Extension.Owners.Contains(interaction.User))return(true,null);if(OwnerOnly&&(ownerOverride||!Extension.Owners.Contains(interaction.User)))return(false,$"OWNER_ONLY");var missingClientPermissions=(interaction.Channel.Guild.Members[Client.CurrentUser.Id].PermissionsIn(interaction.Channel)^ClientPermissions)&ClientPermissions;var missingUserPermissions=(interaction.Channel.Guild.Members[Client.CurrentUser.Id].PermissionsIn(interaction.Channel)^UserPermissions)&UserPermissions;if(missingClientPermissions is not Permissions.None)return(false,"CLIENT_PERMISSIONS");if(missingUserPermissions is not Permissions.None)return(false,"USER_PERMISSIONS");return(true,null);}protected Command(DiscordClient client):base(client){}}public class Throttle{public DateTime Start{get;init;}public int Usages{get;init;}public Task Timeout{get;init;}}public class ThrottlingOptions{public string Id{get;init;}public int Usages{get;init;}public float Duration{get;init;}public ThrottlingOptions(){Id=Guid.NewGuid().ToString();}}}namespace Commands.CommandsStuff{public class CommandContext{public ArgumentCollector Collector{get;init;}public DiscordClient Client{get;init;}public CommandsExtension Extension=>Client.GetCommandsExtension();public bool GetArg<T>(string key,out T t)=>Collector.Get(key,out t);public T GetArg<T>(string key)=>Collector.Get<T>(key);}public class MessageContext:CommandContext{public DiscordMessage Message{get;init;}public DiscordGuild Guild=>Message.Channel.Guild;public DiscordChannel Channel=>Message.Channel;public DiscordUser Author=>Message.Author;public DiscordMember Member=>Author as DiscordMember;public bool PrivateChannel=>Guild is null;public string RawCommandString=>Message.Content;public string RawArgString=>string.Join(' ',Extension.Dispatcher.GetCommandString(Message)[1..]);public Task<DiscordMessage>ReplyAsync(string content)=>Message.ReplyAsync(content);public Task<DiscordMessage>ReplyAsync(string content,DiscordEmbed embed)=>Message.ReplyAsync(content,embed);public Task<DiscordMessage>ReplyAsync(DiscordEmbed embed)=>Message.ReplyAsync(embed);public Task<DiscordMessage>ReplyAsync(DiscordMessageBuilder builder)=>Message.ReplyAsync(builder);public void Deconstruct(out ArgumentCollector collector,out DiscordClient client,out CommandsExtension extension,out DiscordMessage message,out DiscordGuild guild,out DiscordChannel channel,out DiscordUser author,out DiscordMember member,out bool privateChannel,out string rawCommandString,out string rawArgString){collector=Collector;client=Client;extension=Extension;message=Message;guild=Guild;channel=Channel;author=Author;member=Member;privateChannel=PrivateChannel;rawCommandString=RawCommandString;rawArgString=RawArgString;}}public class InteractionContext:CommandContext{public DiscordInteraction Interaction{get;init;}public DiscordGuild Guild=>Interaction.Channel.Guild;public DiscordChannel Channel=>Interaction.Channel;public DiscordUser Author=>Interaction.User;public DiscordMember Member=>Author as DiscordMember;public Task ReplyAsync(string content,bool ephemeral=true)=>Interaction.FollowUpAsync(content,ephemeral);public Task ReplyAsync(string content,DiscordEmbed embed,bool ephemeral=true)=>Interaction.FollowUpAsync(content,embed,ephemeral);public Task ReplyAsync(DiscordEmbed embed,bool ephemeral=true)=>Interaction.FollowUpAsync(embed,ephemeral);public Task ReplyAsync(DiscordMessageBuilder builder,bool ephemeral=true)=>Interaction.FollowUpAsync(builder,ephemeral);public void Deconstruct(out ArgumentCollector collector,out DiscordClient client,out CommandsExtension extension,out DiscordInteraction interaction,out DiscordGuild guild,out DiscordChannel channel,out DiscordUser author,out DiscordMember member){collector=Collector;client=Client;extension=Extension;interaction=Interaction;guild=Guild;channel=Channel;author=Author;member=Member;}}}namespace Commands.CommandsStuff{public class Group{public static List<Group>Groups{get;}=new();public string Name{get;init;}public string Description{get;init;}public bool Guarded{get;init;}public uint Id{get;set;}public List<Command>Commands{get;}=new();public override string ToString()=>Name;public static implicit operator Group(string s)=>Groups.First(x=>x.ToString()==s);}}namespace Commands.CoolStuff.Pagination{public class Page{public string Content{get;init;}public DiscordEmbed Embed{get;init;}public override string ToString()=>string.Join(':',Content,JsonConvert.SerializeObject(Embed));}}namespace Commands.CoolStuff.Pagination{public class PaginatedMessage{private readonly CommandDispatcher _dispatcher;private readonly DiscordUser _userThatHasPerms;private readonly List<Page>_pages;private readonly DiscordMessageBuilder _messageBuilder;private readonly bool _wrapAround;private int _currentPage;public PaginatedMessage(List<Page>pages,CommandDispatcher dispatcher,DiscordUser userThatHasPerms,bool wrapAround=true){if(pages.Count==0)throw new ArgumentException("imagine pages but 0",nameof(pages));_dispatcher=dispatcher;_userThatHasPerms=userThatHasPerms;_wrapAround=wrapAround;_pages=pages=pages.Where(x=>x.Content is not null||x.Embed is not null).ToList();var builder=new DiscordMessageBuilder();var firstButton=new DiscordButtonComponent(ButtonStyle.Primary,Guid.NewGuid()+"_pagination_first",string.Empty,!wrapAround,new DiscordComponentEmoji("?"));var backButton=new DiscordButtonComponent(ButtonStyle.Primary,Guid.NewGuid()+"_pagination_back",string.Empty,!wrapAround,new DiscordComponentEmoji("?"));var stopButton=new DiscordButtonComponent(ButtonStyle.Primary,Guid.NewGuid()+"_pagination_stop",string.Empty,false,new DiscordComponentEmoji("?"));var nextButton=new DiscordButtonComponent(ButtonStyle.Primary,Guid.NewGuid()+"_pagination_next",string.Empty,pages.Count<2&&!wrapAround,new DiscordComponentEmoji("?"));var lastButton=new DiscordButtonComponent(ButtonStyle.Primary,Guid.NewGuid()+"_pagination_last",string.Empty,pages.Count<2&&!wrapAround,new DiscordComponentEmoji("?"));stopButton.AddListener(StopButtonClicked,dispatcher);nextButton.AddListener(NextButtonClicked,dispatcher);lastButton.AddListener(LastButtonClicked,dispatcher);firstButton.AddListener(FirstButtonClicked,dispatcher);backButton.AddListener(BackButtonClicked,dispatcher);builder.AddComponents(firstButton,backButton,stopButton,nextButton,lastButton);builder.WithContent($"Page 1 of {pages.Count}\n{pages.First().Content}");builder.WithEmbed(pages.First().Embed);_currentPage=0;_messageBuilder=builder;}private async void FirstButtonClicked(ComponentInteractionCreateEventArgs obj){if(obj.User!=_userThatHasPerms)return;var components=obj.Message.Components.SelectMany(x=>x.Components).Where(x=>x.CustomId.Contains("pagination")).Select(x=>(DiscordButtonComponent)x).ToList();if(!_wrapAround){components[0].Disable();components[1].Disable();components[3].Enable();components[4].Enable();}_currentPage=0;if((obj.Message.Flags&MessageFlags.Ephemeral)!=0)await obj.Interaction.EditOriginalResponseAsync(new DiscordWebhookBuilder().WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").AddEmbed(_pages[_currentPage].Embed).AddComponents(components));else await obj.Message.ModifyAsync(x=>x.WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").WithEmbed(_pages[_currentPage].Embed).AddComponents(components));}private async void BackButtonClicked(ComponentInteractionCreateEventArgs obj){if(obj.User!=_userThatHasPerms)return;var components=obj.Message.Components.SelectMany(x=>x.Components).Where(x=>x.CustomId.Contains("pagination")).Select(x=>(DiscordButtonComponent)x).ToList();_currentPage=((_currentPage--)%_pages.Count)-1;if(_currentPage<0)_currentPage=_pages.Count-Math.Abs(_currentPage);if(_currentPage==0&&!_wrapAround){components[0].Disable();components[1].Disable();}components[3].Enable();components[4].Enable();if((obj.Message.Flags&MessageFlags.Ephemeral)!=0)await obj.Interaction.EditOriginalResponseAsync(new DiscordWebhookBuilder().WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").AddEmbed(_pages[_currentPage].Embed).AddComponents(components));else await obj.Message.ModifyAsync(x=>x.WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").WithEmbed(_pages[_currentPage].Embed).AddComponents(components));}private async void StopButtonClicked(ComponentInteractionCreateEventArgs obj){if(obj.User!=_userThatHasPerms)return;var components=obj.Message.Components.SelectMany(x=>x.Components).Where(x=>x.CustomId.Contains("pagination")).Select(x=>(DiscordButtonComponent)x).ToList();components.ForEach(x=>x.Disable());if((obj.Message.Flags&MessageFlags.Ephemeral)!=0)await obj.Interaction.EditOriginalResponseAsync(new DiscordWebhookBuilder().WithContent($"Interaction completed\n{obj.Message.Content}").AddEmbed(obj.Message?.Embeds?[0]).AddComponents(components));else await obj.Message.ModifyAsync(x=>x.AddComponents(components).WithContent(obj.Message.Content));components[0].RemoveListener(StopButtonClicked,_dispatcher);components[1].RemoveListener(NextButtonClicked,_dispatcher);components[2].RemoveListener(LastButtonClicked,_dispatcher);components[3].RemoveListener(FirstButtonClicked,_dispatcher);components[4].RemoveListener(BackButtonClicked,_dispatcher);}private async void NextButtonClicked(ComponentInteractionCreateEventArgs obj){if(obj.User!=_userThatHasPerms)return;var components=obj.Message.Components.SelectMany(x=>x.Components).Where(x=>x.CustomId.Contains("pagination")).Select(x=>(DiscordButtonComponent)x).ToList();_currentPage=((_currentPage++)%_pages.Count)+1;if(_currentPage>=_pages.Count)_currentPage-=_pages.Count;if(_currentPage==_pages.Count-1&&!_wrapAround){components[3].Disable();components[4].Disable();}components[0].Enable();components[1].Enable();if((obj.Message.Flags&MessageFlags.Ephemeral)!=0){await obj.Interaction.EditOriginalResponseAsync(new DiscordWebhookBuilder().WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").AddEmbed(_pages[_currentPage].Embed).AddComponents(components));}else{await obj.Message.ModifyAsync(x=>x.WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").WithEmbed(_pages[_currentPage].Embed).AddComponents(components));}}private async void LastButtonClicked(ComponentInteractionCreateEventArgs obj){if(obj.User!=_userThatHasPerms)return;var components=obj.Message.Components.SelectMany(x=>x.Components).Where(x=>x.CustomId.Contains("pagination")).Select(x=>(DiscordButtonComponent)x).ToList();if(!_wrapAround){components[0].Enable();components[1].Enable();components[3].Disable();components[4].Disable();}_currentPage=_pages.Count-1;if((obj.Message.Flags&MessageFlags.Ephemeral)!=0)await obj.Interaction.EditOriginalResponseAsync(new DiscordWebhookBuilder().WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").AddEmbed(_pages[_currentPage].Embed).AddComponents(components));else await obj.Message.ModifyAsync(x=>x.WithContent($"Page {_currentPage+1} of {_pages.Count}\n{_pages[_currentPage].Content}").WithEmbed(_pages[_currentPage].Embed).AddComponents(components));}public static implicit operator DiscordMessageBuilder(PaginatedMessage message)=>message._messageBuilder;}}namespace Commands.Data{public class DisabledCommandEntity{[NotMapped]private static List<DisabledCommandEntity>_entities=new();private string _id;[Key]public string Id{get=>_id??=Guid.NewGuid().ToString();set=>_id=value;}public GuildEntity GuildEntity{get;set;}public ulong GuildId{get;set;}public string Name{get;set;}public static implicit operator Command(DisabledCommandEntity ce)=>ce.Name;public override string ToString()=>string.Join(':',Id,Name,GuildId);public static implicit operator DisabledCommandEntity(string s){var cacheEntity=_entities.FirstOrDefault(x=>x.ToString()==s);if(cacheEntity is not null)return cacheEntity;var split=s.Split(':');var newEntity=new DisabledCommandEntity{Id=split[0],Name=split[1],GuildId=Convert.ToUInt64(split[2])};_entities.Add(newEntity);return newEntity;}public DisabledCommandEntity(){_id=Guid.NewGuid().ToString();}}}namespace Commands.Data{public class DisabledGroupEntity{[NotMapped]private static List<DisabledGroupEntity>_entities=new();private string _id;[Key]public string Id{get=>_id??=Guid.NewGuid().ToString();set=>_id=value;}public GuildEntity GuildEntity{get;set;}public ulong GuildId{get;set;}public string Name{get;set;}public static implicit operator Group(DisabledGroupEntity ge)=>ge.Name;public override string ToString()=>string.Join(':',Id,Name,GuildId);public static implicit operator DisabledGroupEntity(string s){var cacheEntity=_entities.FirstOrDefault(x=>x.ToString()==s);if(cacheEntity is not null)return cacheEntity;var split=s.Split(':');var newEntity=new DisabledGroupEntity{Id=split[0],Name=split[1],GuildId=Convert.ToUInt64(split[2])};_entities.Add(newEntity);return newEntity;}public DisabledGroupEntity(){_id=Guid.NewGuid().ToString();}}}namespace Commands.Data{public class GuildContext:DbContext{public List<GuildEntity>Cache{get;private set;}=new();public DbSet<GuildEntity>Guilds{get;set;}protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder){optionsBuilder.UseNpgsql(Constants.CommandsDbConnectionString);}protected override void OnModelCreating(ModelBuilder modelBuilder){modelBuilder.Entity<GuildEntity>().Property(x=>x.Commands).HasConversion(x=>JsonConvert.SerializeObject(x),x=>JsonConvert.DeserializeObject<Dictionary<DisabledCommandEntity,bool>>(x),ValueComparer.CreateDefault(typeof(Dictionary<DisabledCommandEntity,bool>),false));modelBuilder.Entity<GuildEntity>().Property(x=>x.Groups).HasConversion(x=>JsonConvert.SerializeObject(x),x=>JsonConvert.DeserializeObject<Dictionary<DisabledGroupEntity,bool>>(x),ValueComparer.CreateDefault(typeof(Dictionary<DisabledGroupEntity,bool>),false));}public void DoCacheStuff(){Cache=Guilds.ToList();}public GuildEntity Get(DiscordGuild guild)=>Cache.FirstOrDefault(x=>x.Id==guild.Id);public void Update(DiscordGuild guild,GuildEntity entity){var cacheEntity=Cache.FirstOrDefault(x=>x.Id==guild.Id);if(cacheEntity is null){Cache.Add(entity);Guilds.Add(entity);SaveChanges();return;}cacheEntity.Prefix=entity.Prefix;cacheEntity.Commands=entity.Commands;cacheEntity.Groups=entity.Groups;Guilds.Update(entity);SaveChanges();}}}namespace Commands.Data{public class GuildEntity{[Key]public ulong Id{get;set;}public string Prefix{get;set;}public Dictionary<DisabledCommandEntity,bool>Commands{get;set;}=new();public Dictionary<DisabledGroupEntity,bool>Groups{get;set;}=new();public override bool Equals(object obj){return obj is not(null or not GuildEntity)&&Equals((GuildEntity)obj);}private bool Equals(GuildEntity other){return Id==other.Id&&Prefix==other.Prefix&&Equals(Commands,other.Commands)&&Equals(Groups,other.Groups);}public override int GetHashCode(){return Id.GetHashCode();}public static bool operator==(GuildEntity obj1,GuildEntity obj2)=>obj1?.Equals(obj2)??false;public static bool operator!=(GuildEntity obj1,GuildEntity obj2)=>!(obj1==obj2);}}namespace Commands.Migrations{public partial class InitialCreate:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.CreateTable("Guilds",table=>new{Id=table.Column<decimal>("numeric(20,0)",nullable:false),Prefix=table.Column<string>("text",nullable:true),Commands=table.Column<string>("text",nullable:true),Groups=table.Column<string>("text",nullable:true)},constraints:table=>{table.PrimaryKey("PK_Guilds",x=>x.Id);});}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropTable("Guilds");}}}namespace Commands.Migrations{[DbContext(typeof(GuildContext))][Migration("20211003104109_InitialCreate")]partial class InitialCreate{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);modelBuilder.UseIdentityByDefaultColumns();modelBuilder.Entity("Commands.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<string>("Commands").HasColumnType("text");b.Property<string>("Groups").HasColumnType("text");b.Property<string>("Prefix").HasColumnType("text");b.HasKey("Id");b.ToTable("Guilds");});}}}namespace Commands.Migrations{public partial class ValueComparer:Migration{protected override void Up(MigrationBuilder migrationBuilder){}protected override void Down(MigrationBuilder migrationBuilder){}}}namespace Commands.Migrations{[DbContext(typeof(GuildContext))][Migration("20211003104457_ValueComparer")]partial class ValueComparer{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("Commands.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<string>("Commands").HasColumnType("text");b.Property<string>("Groups").HasColumnType("text");b.Property<string>("Prefix").HasColumnType("text");b.HasKey("Id");b.ToTable("Guilds");});}}}namespace Commands.Migrations{[DbContext(typeof(GuildContext))]
    class GuildContextModelSnapshot:ModelSnapshot{protected override void BuildModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("Commands.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<string>("Commands").HasColumnType("text");b.Property<string>("Groups").HasColumnType("text");b.Property<string>("Prefix").HasColumnType("text");b.HasKey("Id");b.ToTable("Guilds");});}}}namespace Commands.Types{public abstract class ArgumentType:CommandsBase{protected ArgumentType(DiscordClient client):base(client){}public abstract bool Validate(string argString);}public abstract class ArgumentType<T>:ArgumentType{protected ArgumentType(DiscordClient client):base(client){}public abstract T Parse(string argString);public abstract bool IsEmpty(T arg);}[AttributeUsage(AttributeTargets.Class)]public class ArgumentTypeAttribute:Attribute{}}namespace Commands.Types{[ArgumentType]public class BoolArgumentType:ArgumentType<bool?>{private readonly List<string>_truthy=new[]{"true","t","yes","on","enable","enabled","1","+"}.ToList();private readonly List<string>_falsy=new[]{"false","f","no","n","disable","disabled","0","-"}.ToList();public BoolArgumentType(DiscordClient client):base(client){}public override bool Validate(string argString)=>_truthy.Contains(argString.ToLower())||_falsy.Contains(argString.ToLower());public override bool?Parse(string argString)=>_truthy.Contains(argString.ToLower());public override bool IsEmpty(bool?arg)=>false;}}namespace Commands.Types{[ArgumentType]public class CommandArgumentType:ArgumentType<Command>{public override bool Validate(string argString)=>Extension.Registry.FindCommands(argString).Length!=0;public override Command Parse(string argString)=>Extension.Registry.FindCommands(argString)[0];public override bool IsEmpty(Command arg)=>false;public CommandArgumentType(DiscordClient client):base(client){}}}namespace Commands.Types{[ArgumentType]public class DiscordTextChannelArgumentType:ArgumentType<DiscordChannel>{public Regex ChannelRegex=new(@"\d+");public override bool Validate(string argString){var match=ChannelRegex.Match(argString??"0");DiscordChannel channel;try{channel=Client.Guilds.Values.SelectMany(x=>x.Channels.Values).First(x=>x.Id==Convert.ToUInt64(match.Value));return channel.Type is ChannelType.News or ChannelType.Text;}catch{return false;}}public override DiscordChannel Parse(string argString){var guilds=Client.Guilds.Values;var channels=guilds.SelectMany(x=>x.Channels);var givenIdString=ChannelRegex.Match(argString).Value;var givenId=Convert.ToUInt64(givenIdString);try{var(_,value)=channels.First(x=>x.Key==givenId);return value;}catch{return null;}}public override bool IsEmpty(DiscordChannel arg)=>false;public DiscordTextChannelArgumentType(DiscordClient client):base(client){}}[ArgumentType]public class DiscordVoiceChannelArgumentType:ArgumentType<DiscordChannel>{public Regex ChannelRegex=new(@"\d+");public override bool Validate(string argString){var match=ChannelRegex.Match(argString);DiscordChannel channel;try{channel=Client.Guilds.Values.SelectMany(x=>x.Channels.Values).First(x=>x.Id==Convert.ToUInt64(match.Value));return channel.Type is ChannelType.Voice;}catch{return false;}}public override DiscordChannel Parse(string argString){var guilds=Client.Guilds.Values;var channels=guilds.SelectMany(x=>x.Channels);var givenIdString=ChannelRegex.Match(argString).Value;var givenId=Convert.ToUInt64(givenIdString);try{var(_,value)=channels.First(x=>x.Key==givenId);return value;}catch{return null;}}public override bool IsEmpty(DiscordChannel arg)=>false;public DiscordVoiceChannelArgumentType(DiscordClient client):base(client){}}[ArgumentType]public class DiscordCategoryChannelArgumentType:ArgumentType<DiscordChannel>{public Regex ChannelRegex=new(@"\d+");public override bool Validate(string argString){var match=ChannelRegex.Match(argString);DiscordChannel channel;try{channel=Client.Guilds.Values.SelectMany(x=>x.Channels.Values).First(x=>x.Id==Convert.ToUInt64(match.Value));return channel.Type is ChannelType.Category;}catch{return false;}}public override DiscordChannel Parse(string argString){var guilds=Client.Guilds.Values;var channels=guilds.SelectMany(x=>x.Channels);var givenIdString=ChannelRegex.Match(argString).Value;var givenId=Convert.ToUInt64(givenIdString);try{var(_,value)=channels.First(x=>x.Key==givenId);return value;}catch{return null;}}public override bool IsEmpty(DiscordChannel arg)=>false;public DiscordCategoryChannelArgumentType(DiscordClient client):base(client){}}}namespace Commands.Types{[ArgumentType]public class DiscordUserArgumentType:ArgumentType<DiscordUser>{public Regex UserRegex=new(@"\d+");public override bool Validate(string argString){try{var match=UserRegex.Match(argString);try{_=Client.Guilds.Values.SelectMany(x=>x.Members.Values).First(x=>x.Id==Convert.ToUInt64(match.Value));return true;}catch{return false;}}catch{return false;}}public override DiscordUser Parse(string argString){var guilds=Client.Guilds.Values;var channels=guilds.SelectMany(x=>x.Members.Values);var givenIdString=UserRegex.Match(argString).Value;var givenId=Convert.ToUInt64(givenIdString);try{var value=channels.First(x=>x.Id==givenId);return value;}catch{return null;}}public override bool IsEmpty(DiscordUser arg)=>arg is null;public DiscordUserArgumentType(DiscordClient client):base(client){}}}namespace Commands.Types{[ArgumentType]public class FloatArgumentType:ArgumentType<float>{public override bool Validate(string argString){try{_=Convert.ToSingle(argString);return true;}catch{return false;}}public override float Parse(string argString){return Convert.ToSingle(argString);}public override bool IsEmpty(float arg)=>false;public FloatArgumentType(DiscordClient client):base(client){}}}namespace Commands.Types{[ArgumentType]public class GroupArgumentType:ArgumentType<Group>{public override bool Validate(string argString)=>Extension.Registry.Groups.Any(x=>x.Name.ToLower().Contains(argString.ToLower())||x.Id.ToString()==argString);public override Group Parse(string argString)=>Extension.Registry.Groups.Find(x=>x.Name.ToLower().Contains(argString.ToLower())||x.Id.ToString()==argString);public override bool IsEmpty(Group arg)=>false;public GroupArgumentType(DiscordClient client):base(client){}}}namespace Commands.Types{[ArgumentType]public class IntArgumentType:ArgumentType<int>{public override bool Validate(string argString){try{_=Convert.ToInt32(argString);return true;}catch{return false;}}public override int Parse(string argString){return Convert.ToInt32(argString);}public override bool IsEmpty(int arg)=>false;public IntArgumentType(DiscordClient client):base(client){}}}namespace Commands.Types{[ArgumentType]public class StringArgumentType:ArgumentType<string>{public override bool Validate(string argString)=>!string.IsNullOrEmpty(argString);public override string Parse(string argString)=>argString;public override bool IsEmpty(string arg)=>string.IsNullOrEmpty(arg);public StringArgumentType(DiscordClient client):base(client){}}}namespace Commands.Utils{public delegate void EventHandler<in T1>(T1 t1);public delegate void EventHandler<in T1,in T2>(T1 t1,T2 t2);public delegate void EventHandler<in T1,in T2,in T3>(T1 t1,T2 t2,T3 t3);public delegate void EventHandler<in T1,in T2,in T3,in T4>(T1 t1,T2 t2,T3 t3,T4 t4);public delegate void EventHandler<in T1,in T2,in T3,in T4,in T5>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5);public delegate void EventHandler<in T1,in T2,in T3,in T4,in T5,in T6>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6);public delegate void EventHandler<in T1,in T2,in T3,in T4,in T5,in T6,in T7>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7);public delegate void EventHandler<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8);public delegate void EventHandler<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8,T9 t9);public delegate Task AsyncEventHandler<in T1>(T1 t1);public delegate Task AsyncEventHandler<in T1,in T2>(T1 t1,T2 t2);public delegate Task AsyncEventHandler<in T1,in T2,in T3>(T1 t1,T2 t2,T3 t3);public delegate Task AsyncEventHandler<in T1,in T2,in T3,in T4>(T1 t1,T2 t2,T3 t3,T4 t4);public delegate Task AsyncEventHandler<in T1,in T2,in T3,in T4,in T5>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5);public delegate Task AsyncEventHandler<in T1,in T2,in T3,in T4,in T5,in T6>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6);public delegate Task AsyncEventHandler<in T1,in T2,in T3,in T4,in T5,in T6,in T7>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7);public delegate Task AsyncEventHandler<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8);public delegate Task AsyncEventHandler<in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,in T9>(T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8,T9 t9);public static class EventHandlerExtensions{public static void SafeInvoke<T1>(this EventHandler<T1>handler,T1 t1)=>handler?.Invoke(t1);public static void SafeInvoke<T1,T2>(this EventHandler<T1,T2>handler,T1 t1,T2 t2)=>handler?.Invoke(t1,t2);public static void SafeInvoke<T1,T2,T3>(this EventHandler<T1,T2,T3>handler,T1 t1,T2 t2,T3 t3)=>handler?.Invoke(t1,t2,t3);public static void SafeInvoke<T1,T2,T3,T4>(this EventHandler<T1,T2,T3,T4>handler,T1 t1,T2 t2,T3 t3,T4 t4)=>handler?.Invoke(t1,t2,t3,t4);public static void SafeInvoke<T1,T2,T3,T4,T5>(this EventHandler<T1,T2,T3,T4,T5>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5)=>handler?.Invoke(t1,t2,t3,t4,t5);public static void SafeInvoke<T1,T2,T3,T4,T5,T6>(this EventHandler<T1,T2,T3,T4,T5,T6>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6)=>handler?.Invoke(t1,t2,t3,t4,t5,t6);public static void SafeInvoke<T1,T2,T3,T4,T5,T6,T7>(this EventHandler<T1,T2,T3,T4,T5,T6,T7>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7)=>handler?.Invoke(t1,t2,t3,t4,t5,t6,t7);public static void SafeInvoke<T1,T2,T3,T4,T5,T6,T7,T8>(this EventHandler<T1,T2,T3,T4,T5,T6,T7,T8>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8)=>handler.Invoke(t1,t2,t3,t4,t5,t6,t7,t8);public static void SafeInvoke<T1,T2,T3,T4,T5,T6,T7,T8,T9>(this EventHandler<T1,T2,T3,T4,T5,T6,T7,T8,T9>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8,T9 t9)=>handler?.Invoke(t1,t2,t3,t4,t5,t6,t7,t8,t9);public static void SafeInvoke<T1>(this AsyncEventHandler<T1>handler,T1 t1)=>handler?.Invoke(t1);public static void SafeInvoke<T1,T2>(this AsyncEventHandler<T1,T2>handler,T1 t1,T2 t2)=>handler?.Invoke(t1,t2);public static void SafeInvoke<T1,T2,T3>(this AsyncEventHandler<T1,T2,T3>handler,T1 t1,T2 t2,T3 t3)=>handler?.Invoke(t1,t2,t3);public static void SafeInvoke<T1,T2,T3,T4>(this AsyncEventHandler<T1,T2,T3,T4>handler,T1 t1,T2 t2,T3 t3,T4 t4)=>handler?.Invoke(t1,t2,t3,t4);public static void SafeInvoke<T1,T2,T3,T4,T5>(this AsyncEventHandler<T1,T2,T3,T4,T5>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5)=>handler?.Invoke(t1,t2,t3,t4,t5);public static void SafeInvoke<T1,T2,T3,T4,T5,T6>(this AsyncEventHandler<T1,T2,T3,T4,T5,T6>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6)=>handler?.Invoke(t1,t2,t3,t4,t5,t6);public static void SafeInvoke<T1,T2,T3,T4,T5,T6,T7>(this AsyncEventHandler<T1,T2,T3,T4,T5,T6,T7>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7)=>handler?.Invoke(t1,t2,t3,t4,t5,t6,t7);public static void SafeInvoke<T1,T2,T3,T4,T5,T6,T7,T8>(this AsyncEventHandler<T1,T2,T3,T4,T5,T6,T7,T8>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8)=>handler.Invoke(t1,t2,t3,t4,t5,t6,t7,t8);public static void SafeInvoke<T1,T2,T3,T4,T5,T6,T7,T8,T9>(this AsyncEventHandler<T1,T2,T3,T4,T5,T6,T7,T8,T9>handler,T1 t1,T2 t2,T3 t3,T4 t4,T5 t5,T6 t6,T7 t7,T8 t8,T9 t9)=>handler?.Invoke(t1,t2,t3,t4,t5,t6,t7,t8,t9);}}namespace Commands.Utils{public static class Extensions{public static Task<DiscordMessage>ReplyAsync(this DiscordMessage message,string content){var builder=new DiscordMessageBuilder().WithAllowedMention(new UserMention()).WithContent(content);return message.RespondAsync(builder);}public static Task<DiscordMessage>ReplyAsync(this DiscordMessage message,DiscordEmbed embed){var builder=new DiscordMessageBuilder().WithAllowedMention(new UserMention()).WithEmbed(embed);return message.RespondAsync(builder);}public static Task<DiscordMessage>ReplyAsync(this DiscordMessage message,DiscordMessageBuilder builder){builder.WithAllowedMention(new UserMention());return message.RespondAsync(builder);}public static Task<DiscordMessage>ReplyAsync(this DiscordMessage message,string content,DiscordEmbed embed){var builder=new DiscordMessageBuilder().WithAllowedMention(new UserMention()).WithContent(content).WithEmbed(embed);return message.RespondAsync(builder);}public static Task FollowUpAsync(this DiscordInteraction message,string content,bool ephemeral=true){return message.CreateFollowupMessageAsync(new DiscordFollowupMessageBuilder{Content=content,IsEphemeral=ephemeral});}public static Task FollowUpAsync(this DiscordInteraction message,DiscordEmbed embed,bool ephemeral=true){return message.CreateFollowupMessageAsync(new DiscordFollowupMessageBuilder(){IsEphemeral=ephemeral}.AddEmbed(embed));}public static Task FollowUpAsync(this DiscordInteraction interaction,DiscordMessageBuilder builder,bool ephemeral=true){return interaction.CreateFollowupMessageAsync(new DiscordFollowupMessageBuilder().AddEmbeds(builder.Embeds).AddComponents(builder.Components).AsEphemeral(ephemeral).WithContent(builder.Content));}public static Task FollowUpAsync(this DiscordInteraction message,string content,DiscordEmbed embed,bool ephemeral=true){return message.CreateFollowupMessageAsync(new DiscordFollowupMessageBuilder{Content=content,IsEphemeral=ephemeral}.AddEmbed(embed));}public static CommandsExtension UseCommands(this DiscordClient client,CommandsExtension commandsExtension){client.AddExtension(commandsExtension);return client.GetCommandsExtension();}public static CommandsExtension GetCommandsExtension(this DiscordClient client)=>client.GetExtension<CommandsExtension>();public static DateTime ConvertFromUnixTimestamp(double timestamp){var origin=new DateTime(1970,1,1,0,0,0,0,DateTimeKind.Utc);return origin.AddSeconds(timestamp);}public static double ConvertToUnixTimestamp(this DateTime date){var origin=new DateTime(1970,1,1,0,0,0,0,DateTimeKind.Utc);var diff=date.ToUniversalTime()-origin;return Math.Floor(diff.TotalSeconds);}public static void Error<T>(this ILogger<T>logger,Exception e)=>logger.LogError($"{e.Message}\n{e.StackTrace}");public static void AddListener(this DiscordComponent component,Action<ComponentInteractionCreateEventArgs>listener,CommandDispatcher dispatcher){dispatcher.ComponentActions.Add(component.CustomId,listener);}public static void RemoveListener(this DiscordComponent component,Action<ComponentInteractionCreateEventArgs>listener,CommandDispatcher dispatcher){dispatcher.ComponentActions.Remove(component.CustomId);}public static List<T>[]Partition<T>(this List<T>list,int totalPartitions){if(list==null)throw new ArgumentNullException(nameof(list));if(totalPartitions<1)throw new ArgumentOutOfRangeException(nameof(totalPartitions));var partitions=new List<T>[totalPartitions];var maxSize=(int)Math.Ceiling(list.Count/(double)totalPartitions);var k=0;for(var i=0;i<partitions.Length;i++){partitions[i]=new List<T>();for(var j=k;j<k+maxSize;j++){if(j>=list.Count)break;partitions[i].Add(list[j]);}k+=maxSize;}return partitions;}}}namespace Commands.Utils{public class FriendlyException:Exception{public FriendlyException(string message):base(message){}}}namespace Commands.Utils{public class Logger:ILogger{private readonly ConsoleTheme _theme;private readonly string _name;public Logger(string name,ConsoleTheme theme){_name=name;_theme=theme;}public IDisposable BeginScope<TState>(TState state)=>default;public bool IsEnabled(LogLevel logLevel)=>_theme.LogLevels.ContainsKey(logLevel);public void Log<TState>(LogLevel logLevel,EventId eventId,TState state,Exception exception,Func<TState,Exception,string>formatter){if(!IsEnabled(logLevel))return;if(_theme.EventId!=0&&_theme.EventId!=eventId.Id)return;var originalColor=Console.ForegroundColor;var stackTrace=new StackTrace();var frame=stackTrace.GetFrames()[5];var method=frame.GetMethod();var fullName=method!.DeclaringType!.FullName;var source=fullName!.Contains('+')?fullName![fullName.LastIndexOf(".",StringComparison.Ordinal)..fullName.IndexOf("+",StringComparison.Ordinal)]:method.DeclaringType.Name;var methodName=method.Name=="MoveNext"?method.DeclaringType.Name[2..^1]:method.Name;methodName=methodName==".ctor"?fullName+"_ctor":methodName;methodName=methodName.Contains('>')?"(some local method somewhere idk)":methodName;Console.ForegroundColor=_theme.LogLevels[logLevel];Console.WriteLine($"[{string.Join(" : ",_name,eventId.Id,string.IsNullOrEmpty(eventId.Name)?methodName:eventId.Name,logLevel,DateTime.Now.ToString("hh:mm:ss t z"))}] {(string.IsNullOrEmpty(source)?"":$"[{source.Replace(".","")}] ")}{formatter(state,exception)}");Console.ForegroundColor=originalColor;}}public class LoggerFactory:ILoggerFactory{public void Dispose(){}public ILogger CreateLogger(string categoryName)=>new Logger(categoryName,new ConsoleTheme());public void AddProvider(ILoggerProvider provider){}}public class ConsoleTheme{public int EventId{get;set;}public Dictionary<LogLevel,ConsoleColor>LogLevels{get;}=new(){[LogLevel.Information]=ConsoleColor.Green,[LogLevel.Critical]=ConsoleColor.DarkRed,[LogLevel.Debug]=ConsoleColor.Blue,[LogLevel.Error]=ConsoleColor.Red,[LogLevel.Warning]=ConsoleColor.Yellow,};}}namespace CommandsTest{public class CommandsTestBot{private DiscordClient Client{get;}private BlacklistModule BlacklistModule{get;}private AfkModule AfkModule{get;}public CommandsTestBot(){var config=GetConfig("Config.json");var discordConfiguration=new DiscordConfiguration{Token=config.Token,LoggerFactory=new LoggerFactory(),Intents=DiscordIntents.All,MinimumLogLevel=LogLevel.Trace};var commandsConfig=new CommandsConfig{Prefix=config.Prefix,Owners=new ulong[]{742976057761726514,519673297693048832},Invite="discord.gg/TCf7QexN5e"};Client=new DiscordClient(discordConfiguration);AfkModule=Client.AddAfkModule();Client.MessageCreated+=AfkModule.OnMessage;var commandsExtension=Client.UseCommands(new CommandsExtension(commandsConfig));commandsExtension.Registry.RegisterDefaults();commandsExtension.Registry.RegisterGroups(new Group[]{new(){Name="Misc",Description="misc stuff, nothing much"},new(){Name="Admin",Description="Owner only commands idk"},new(){Name="MusicStuff",Description="the title says it all"},new(){Name="Moderation",Description="for people who like milk"}});commandsExtension.Registry.RegisterCommands(GetType().Assembly);Client.GuildMemberAdded+=(_,args)=>CheckForBadNick(args.Member,args.Member.Nickname??args.Member.Username);Client.GuildMemberUpdated+=(_,args)=>CheckForBadNick(args.Member,args.NicknameAfter);Client.GuildDownloadCompleted+=(client,_)=>{client.Logger.LogInformation($"Client ready, logged in as ({client.CurrentUser.Username}#{client.CurrentUser.Discriminator}), you can run your command now senpai");return Task.CompletedTask;};Client.UseLavalink();Client.Logger.LogInformation("Initializing blacklist module");BlacklistModule=Client.AddBlacklistModule();Client.Logger.LogInformation("Initialized blacklist module");commandsExtension.Dispatcher.AddInhibitor((DiscordMessage message,Command t2)=>BlacklistModule.Check(message,t2));commandsExtension.Dispatcher.AddInhibitor((DiscordInteraction interaction,Command t2)=>BlacklistModule.Check(interaction,t2));Tag.RegisterTags(GetType().Assembly);}private async Task CheckForBadNick(DiscordMember member,string nick){try{if(nick is null or"??")return;if(!(nick[0]>=48&&nick[0]<=57||nick[0]>=65&&nick[0]<=90||nick[0]>=97&&nick[0]<=122))await member.ModifyAsync(x=>x.Nickname="??");}catch(Exception e){Client.Logger.Error(e);}}public async Task Run(){await Client.ConnectAsync(new DiscordActivity{ActivityType=ActivityType.Playing,Name="Milk"},UserStatus.Idle,DateTimeOffset.Now);}public Config GetConfig(string fileName){var directory=Directory.GetCurrentDirectory();var fullPath=Path.Combine(directory,fileName);var reader=new StreamReader(fullPath);var jsonString=reader.ReadToEnd();var config=JsonConvert.DeserializeObject<Config>(jsonString);return config;}}}namespace CommandsTest{public struct Config{public string Token{get;set;}public string Prefix{get;set;}}}namespace CommandsTest{public class Constants{public const string DatabaseConnectionString=@"Host=localhost; Database=CommandsTest; Username=toasty; Password=toasty;";}}namespace CommandsTest{internal class Program{public static async Task Main(){var bot=new CommandsTestBot();await bot.Run();await Task.Delay(-1);}}}namespace CommandsTest.Commands.Admin{public class Shut:Command{public override string GroupName=>"Admin";public override string Description=>"close bot ig";public override bool OwnerOnly=>true;public override async Task Run(MessageContext ctx){await ctx.ReplyAsync("cya");Environment.Exit(0);}public override async Task Run(InteractionContext ctx){await ctx.ReplyAsync("cya");Environment.Exit(0);}public Shut(DiscordClient client):base(client){}}}namespace CommandsTest.Commands.Misc{public class Afk:Command{public Afk(DiscordClient client):base(client){}public override string GroupName=>"Misc";public override Argument[]Arguments=>new Argument[]{new(){Types=new[]{typeof(string)},Key="SetOrClear",Default="set",Optional=true,OneOf=new[]{"set","clear"}},new(){Key="UserToClear",Types=new[]{typeof(DiscordUser)},Optional=true},new(){Key="Message",Optional=true,Default="Afk",Infinite=true,Types=new[]{typeof(string)}}};public override async Task Run(MessageContext ctx){var afkModule=ctx.Client.GetAfkModule();var setOrClear=ctx.GetArg<string>("SetOrClear");var message=ctx.GetArg<string>("Message");var userToRemove=ctx.GetArg<DiscordUser>("UserToClear");switch(setOrClear){case"set":afkModule.SetAfk(ctx.Author,message);await ctx.ReplyAsync($"<@{ctx.Author.Id}> i set your afk: {message}");break;case"clear":afkModule.RemoveAfk(userToRemove);await ctx.ReplyAsync($"removed afk for {userToRemove.Id}");break;}}public override async Task Run(InteractionContext ctx){var afkModule=ctx.Client.GetAfkModule();var setOrClear=ctx.GetArg<string>("SetOrClear");var message=ctx.GetArg<string>("Message");var userToRemove=ctx.GetArg<DiscordUser>("UserToClear");switch(setOrClear){case"set":afkModule.SetAfk(ctx.Author,message);await ctx.ReplyAsync($"<@{ctx.Author.Id}> i set your afk: {message}");break;case"clear":afkModule.RemoveAfk(userToRemove);await ctx.ReplyAsync($"removed afk for {userToRemove.Username}");break;}}}}namespace CommandsTest.Commands.Misc{public class Echo:Command{public override string GroupName=>"Misc";public override string[]Aliases=>new[]{"say"};public override Permissions ClientPermissions=>Permissions.ManageMessages;public override string Description=>"drinking milk";public override bool GuildOnly=>true;public override Argument[]Arguments=>new Argument[]{new(){Key="Channel",Optional=true,Types=new[]{typeof(DiscordTextChannelArgumentType)}},new(){Key="Text",Infinite=true,Types=new[]{typeof(string)}}};public override async Task Run(MessageContext ctx){var channel=ctx.GetArg<DiscordChannel>("Channel")??ctx.Channel;await ctx.Message.DeleteAsync();var text=ctx.GetArg<string>("Text");var builder=new DiscordMessageBuilder().WithContent(text).WithAllowedMention(new UserMention());await channel.SendMessageAsync(builder);}public override async Task Run(InteractionContext ctx){var channel=ctx.GetArg<DiscordChannel>("Channel")??ctx.Channel;var text=ctx.GetArg<string>("Text");var original=await ctx.Interaction.GetOriginalResponseAsync();if((original.Flags&MessageFlags.Ephemeral)==0)await ctx.Interaction.DeleteOriginalResponseAsync();var builder=new DiscordMessageBuilder().WithContent(text).WithAllowedMention(new UserMention());await channel.SendMessageAsync(builder);}public Echo(DiscordClient client):base(client){}}}namespace CommandsTest.Commands.Misc{public class Invite:Command{public Invite(DiscordClient client):base(client){}public override string GroupName=>"Misc";public override async Task Run(MessageContext ctx){await ctx.ReplyAsync("https://discord.com/api/oauth2/authorize?client_id=874898292771807282&permissions=8&scope=bot%20applications.commands");}public override async Task Run(InteractionContext ctx){await ctx.ReplyAsync("https://discord.com/api/oauth2/authorize?client_id=874898292771807282&permissions=8&scope=bot%20applications.commands");}}}namespace CommandsTest.Commands.Misc{public class ServerInfo:Command{public ServerInfo(DiscordClient client):base(client){}public override string GroupName=>"Misc";public override Task Run(MessageContext ctx){return ctx.ReplyAsync(new DiscordEmbedBuilder{Title=$"Info about {ctx.Guild.Name}",Thumbnail=new DiscordEmbedBuilder.EmbedThumbnail{Url=ctx.Guild.IconUrl},Footer=new DiscordEmbedBuilder.EmbedFooter{Text=$"Requested by {ctx.Author.Username}#{ctx.Author.Discriminator}",IconUrl=ctx.Author.AvatarUrl}}.AddField("Owner:",$"<@{ctx.Guild.OwnerId}>").AddField("Members:",ctx.Guild.MemberCount.ToString()));}public override Task Run(InteractionContext ctx){return ctx.ReplyAsync(new DiscordEmbedBuilder{Title=$"Info about {ctx.Guild.Name}",Thumbnail=new DiscordEmbedBuilder.EmbedThumbnail{Url=ctx.Guild.IconUrl},Footer=new DiscordEmbedBuilder.EmbedFooter{Text=$"Requested by {ctx.Author.Username}#{ctx.Author.Discriminator}",IconUrl=ctx.Author.AvatarUrl}}.AddField("Owner:",$"<@{ctx.Guild.OwnerId}>").AddField("Members:",ctx.Guild.MemberCount.ToString()));}}}namespace CommandsTest.Commands.Misc{public class SetUp:Command{public override string GroupName=>"Misc";public override string Description=>"setup stuff idk";public override bool RegisterSlashCommand=>false;public override bool GuildOnly=>true;public override async Task Run(MessageContext ctx){var msg=await ctx.ReplyAsync("i'll try");await ctx.Extension.Registry.RegisterSlashCommands(ctx.Extension.Registry.Commands.ToArray(),ctx.Guild);await msg.ModifyAsync("done ig");}public override Task Run(InteractionContext _)=>Task.CompletedTask;public SetUp(DiscordClient client):base(client){}}}namespace CommandsTest.Commands.Misc{public class Tag:Command{private static readonly List<MethodInfo>_globalTags=new();private static readonly List<TagsModule>_tagsModule=new();private readonly CommandsTest.Data.GuildContext _guildContext;private readonly List<TagEntity>_allTags;public Tag(DiscordClient client):base(client){_guildContext=new CommandsTest.Data.GuildContext();client.Logger.LogInformation("Loading Tags");_allTags=_guildContext.Tags.ToList();client.Logger.LogInformation("Loaded Tags");}public override string GroupName=>"Misc";public override Argument[]Arguments=>new Argument[]{new(){Key="CreateOrDeleteOrGet",Default="get",Types=new[]{typeof(string)},OneOf=new[]{"get","create","delete"},Optional=true},new(){Key="TagName",Types=new[]{typeof(string)},Default="all",Optional=true},new(){Key="TagContent",Types=new[]{typeof(string)},Optional=true,Default=string.Empty,Infinite=true}};public override async Task Run(MessageContext ctx){var tagContent=ctx.GetArg<string>("TagContent").Trim();var createOrDeleteOrGet=ctx.GetArg<string>("CreateOrDeleteOrGet");var tagName=createOrDeleteOrGet=="create"?ctx.GetArg<string>("TagName"):$"{ctx.GetArg<string>("TagName")} {tagContent}".Trim();switch(createOrDeleteOrGet){case"get":if(tagName is"all"or"list"){var pagesStringArrayListIHaveNoIdea=_globalTags.Select(x=>x.Name).ToList();pagesStringArrayListIHaveNoIdea.AddRange(_allTags.Where(x=>x.GuildId==ctx.Guild.Id).Select(x=>x.Name));var pagesData=pagesStringArrayListIHaveNoIdea.Partition(1).Where(x=>x.Count!=0).ToList().SelectMany(x=>x).Distinct();var pages=pagesData.Select(tag=>new Page{Content=string.Join('\n',$"{(_allTags.Any(x=>x.Name==tag)?"Guild":"Global")} tag `{tag}`")}).ToList();var paginatedMessage=new PaginatedMessage(pages,ctx.Extension.Dispatcher,ctx.Author,false);await ctx.ReplyAsync(paginatedMessage);return;}var method=_globalTags.FirstOrDefault(x=>string.Equals(x.Name,tagName,StringComparison.CurrentCultureIgnoreCase)&&x.GetParameters().First().ParameterType==typeof(MessageContext));if(method is null){var tag=_allTags.FirstOrDefault(x=>string.Equals(x.Name,tagName,StringComparison.CurrentCultureIgnoreCase)&&x.GuildId==ctx.Guild.Id);if(tag is null)throw new FriendlyException("Tag doesnt exist");await ctx.ReplyAsync(tag.Content);break;}var type=_tagsModule.First(x=>method!.DeclaringType==x.GetType());var tagResult=(string)method.Invoke(type,new object[]{ctx});_=ctx.Message.Reference is null?await ctx.ReplyAsync(tagResult):await ctx.Message.Reference.Message.ReplyAsync(tagResult);break;case"create":if(_allTags.Any(x=>string.Equals(x.Name,tagName,StringComparison.CurrentCultureIgnoreCase)))throw new FriendlyException("nah that tag exist");var newTag=new TagEntity{Name=tagName,Content=tagContent,ThePersonWhoMadeThisTagUserId=ctx.Author.Id,GuildId=ctx.Guild.Id};_allTags.Add(newTag);_guildContext.Tags.Add(newTag);_guildContext.Guilds.First(x=>x.Id==ctx.Guild.Id).Tags.Add(newTag);await _guildContext.SaveChangesAsync();await ctx.ReplyAsync($"Created new Tag `{tagName}`");break;case"delete":var tagToDelete=_allTags.FirstOrDefault(x=>x.Name==tagName);if(tagToDelete is null)throw new FriendlyException("that tag dont exist");_allTags.Remove(tagToDelete);_guildContext.Remove(tagToDelete);(await _guildContext.Guilds.FindAsync(ctx.Guild.Id))?.Tags.Remove(tagToDelete);await _guildContext.SaveChangesAsync();await ctx.ReplyAsync($"Guild Tag `{tagToDelete.Name}` was deleted");break;default:throw new FriendlyException("how did you manage to do that");}}public override async Task Run(InteractionContext ctx){var tagContent=ctx.GetArg<string>("TagContent");var createOrDeleteOrGet=ctx.GetArg<string>("CreateOrDeleteOrGet");var tagName=createOrDeleteOrGet=="create"?ctx.GetArg<string>("TagName"):$"{ctx.GetArg<string>("TagName")} {tagContent}".Trim();switch(createOrDeleteOrGet){case"get":if(tagName is"all"or"list"){var pagesStringArrayListIHaveNoIdea=_globalTags.Select(x=>x.Name).ToList();pagesStringArrayListIHaveNoIdea.AddRange(_allTags.Where(x=>x.GuildId==ctx.Guild.Id).Select(x=>x.Name));var pagesData=pagesStringArrayListIHaveNoIdea.Partition(Math.Max(pagesStringArrayListIHaveNoIdea.Count/2,1)).Where(x=>x.Count!=0).ToList().SelectMany(x=>x).Distinct();var pages=pagesData.Select(tag=>new Page{Content=string.Join('\n',$"{(_allTags.Any(x=>x.Name==tag)?"Guild":"Global")} tag `{tag}`")}).ToList();var paginatedMessage=new PaginatedMessage(pages,ctx.Extension.Dispatcher,ctx.Author,false);await ctx.ReplyAsync(paginatedMessage);return;}var method=_globalTags.FirstOrDefault(x=>string.Equals(x.Name,tagName,StringComparison.CurrentCultureIgnoreCase)&&x.GetParameters().First().ParameterType==typeof(InteractionContext));if(method is null){var tag=_allTags.FirstOrDefault(x=>string.Equals(x.Name,tagName,StringComparison.CurrentCultureIgnoreCase)&&x.GuildId==ctx.Guild.Id);if(tag is null)throw new FriendlyException("Tag doesnt exist");await ctx.ReplyAsync(tag.Content);break;}var type=_tagsModule.First(x=>method!.DeclaringType==x.GetType());var tagResult=(string)method.Invoke(type,new object[]{ctx});await ctx.ReplyAsync(tagResult);break;case"create":if(_allTags.Any(x=>string.Equals(x.Name,tagName,StringComparison.CurrentCultureIgnoreCase)))throw new FriendlyException("nah that tag exist");var newTag=new TagEntity{Name=tagName,Content=tagContent,ThePersonWhoMadeThisTagUserId=ctx.Author.Id,GuildId=ctx.Guild.Id};_allTags.Add(newTag);_guildContext.Tags.Add(newTag);_guildContext.Guilds.First(x=>x.Id==ctx.Guild.Id).Tags.Add(newTag);await _guildContext.SaveChangesAsync();await ctx.ReplyAsync($"Created new Tag `{tagName}`");break;case"delete":var tagToDelete=_allTags.FirstOrDefault(x=>x.Name==tagName);if(tagToDelete is null)throw new FriendlyException("that tag dont exist");_allTags.Remove(tagToDelete);_guildContext.Remove(tagToDelete);(await _guildContext.Guilds.FindAsync(ctx.Guild.Id))?.Tags.Remove(tagToDelete);await _guildContext.SaveChangesAsync();await ctx.ReplyAsync($"Guild Tag `{tagToDelete.Name}` was deleted");break;default:throw new FriendlyException("how did you manage to do that");}}public static void RegisterTags(Assembly assembly){_tagsModule.AddRange(assembly.GetTypes().Where(x=>x.IsSubclassOf(typeof(TagsModule))).Select(x=>(TagsModule)Activator.CreateInstance(x)));_globalTags.AddRange(_tagsModule.SelectMany(x=>x.GetType().GetMethods()).Where(x=>x.GetCustomAttribute<TagAttribute>()is not null));}}[AttributeUsage(AttributeTargets.Method|AttributeTargets.Property)]public class TagAttribute:Attribute{}}namespace CommandsTest.Commands.Moderation{public class Blacklist:Command{public Blacklist(DiscordClient client):base(client){}public override string GroupName=>"Moderation";public override Permissions UserPermissions=>Permissions.All;public override Argument[]Arguments=>new Argument[]{new(){Key="User",Types=new[]{typeof(DiscordUser)}},new(){Key="CommandOrGroup",Types=new[]{typeof(Command),typeof(Group)}}};public override async Task Run(MessageContext ctx){var user=(DiscordMember)ctx.GetArg<DiscordUser>("User");var isCommand=ctx.GetArg<Command>("CommandOrGroup",out var command);ctx.GetArg<Group>("CommandOrGroup",out var group);var blacklistModule=Client.GetBlacklistModule();var result=isCommand?blacklistModule.BlacklistUser(user,ctx.Guild,command):blacklistModule.BlacklistUser(user,ctx.Guild,@group);var replyString=result switch{BlacklistResult.Added=>$"Added {user.Nickname??user.Username} to the blacklist for {(isCommand?$"Command {command.Name}":$"Group {group.Name}")}",BlacklistResult.AlreadyBlacklisted=>$"but they already blacklisted :|",_=>throw new ArgumentOutOfRangeException()};await ctx.ReplyAsync(replyString);}public override async Task Run(InteractionContext ctx){var user=(DiscordMember)ctx.GetArg<DiscordUser>("User");var isCommand=ctx.GetArg<Command>("CommandOrGroup",out var command);ctx.GetArg<Group>("CommandOrGroup",out var group);var blacklistModule=Client.GetBlacklistModule();var result=isCommand?blacklistModule.BlacklistUser(user,ctx.Guild,command):blacklistModule.BlacklistUser(user,ctx.Guild,@group);var replyString=result switch{BlacklistResult.Added=>$"Added {user.Nickname??user.Username} to the blacklist for {(isCommand?$"Command {command.Name}":$"Group {group.Name}")}",BlacklistResult.AlreadyBlacklisted=>$"but they already blacklisted :|",_=>throw new ArgumentOutOfRangeException()};await ctx.ReplyAsync(replyString);}}}namespace CommandsTest.Commands.Moderation{public class Whitelist:Command{public Whitelist(DiscordClient client):base(client){}public override string GroupName=>"Moderation";public override Permissions UserPermissions=>Permissions.All;public override Argument[]Arguments=>new Argument[]{new(){Key="User",Types=new[]{typeof(DiscordUser)}},new(){Key="CommandOrGroup",Types=new[]{typeof(Command),typeof(Group)}}};public override async Task Run(MessageContext ctx){var user=(DiscordMember)ctx.GetArg<DiscordUser>("User");var isCommand=ctx.GetArg<Command>("CommandOrGroup",out var command);ctx.GetArg<Group>("CommandOrGroup",out var group);var blacklistModule=Client.GetBlacklistModule();var result=isCommand?blacklistModule.WhiteListUser(user,ctx.Guild,command):blacklistModule.WhiteListUser(user,ctx.Guild,group);var replyString=result switch{WhitelistResult.Removed=>$"Removed {user.Nickname??user.Username} from the blacklist for {(isCommand?$"Command {command.Name}":$"Group {group.Name}")}",WhitelistResult.NotBlacklisted=>$"blacklist them first you dum",_=>throw new ArgumentOutOfRangeException()};await ctx.ReplyAsync(replyString);}public override async Task Run(InteractionContext ctx){var user=(DiscordMember)ctx.GetArg<DiscordUser>("User");var isCommand=ctx.GetArg<Command>("CommandOrGroup",out var command);ctx.GetArg<Group>("CommandOrGroup",out var group);var blacklistModule=Client.GetBlacklistModule();var result=isCommand?blacklistModule.WhiteListUser(user,ctx.Guild,command):blacklistModule.WhiteListUser(user,ctx.Guild,group);var replyString=result switch{WhitelistResult.Removed=>$"Removed {user.Nickname??user.Username} from the blacklist for {(isCommand?$"Command {command.Name}":$"Group {group.Name}")}",WhitelistResult.NotBlacklisted=>$"blacklist them first you dum",_=>throw new ArgumentOutOfRangeException()};await ctx.ReplyAsync(replyString);}}}namespace CommandsTest.Commands.MusicStuff{public class Connect:Command{public override string GroupName=>"MusicStuff";public override string Description=>"join vc";public static LavalinkNodeConnection LavaLink{get;set;}public static LavalinkGuildConnection LavaLinkVoice{get;set;}public static DiscordChannel ContextChannel{get;set;}public override async Task Run(MessageContext ctx){if(LavaLink is not null)return;var lava=ctx.Client.GetLavalink();if(lava is null){await ctx.ReplyAsync("Lavalink not enabled");return;}LavaLink=await lava.ConnectAsync(new LavalinkConfiguration{RestEndpoint=new ConnectionEndpoint("127.0.0.1",2333),SocketEndpoint=new ConnectionEndpoint("127.0.0.1",2333),Password="youshallnotpass"});LavaLink.Disconnected+=LavaLinkDisconnected;await ctx.ReplyAsync("Connected to lavalink node.");}private Task LavaLinkDisconnected(LavalinkNodeConnection ll,NodeDisconnectedEventArgs e){if(!e.IsCleanClose)return Task.CompletedTask;LavaLink=null;LavaLinkVoice=null;return Task.CompletedTask;}public override async Task Run(InteractionContext ctx){if(LavaLink!=null)return;var lava=ctx.Client.GetLavalink();if(lava is null){await ctx.ReplyAsync("LavaLink not enabled");return;}LavaLink=await lava.ConnectAsync(new LavalinkConfiguration{RestEndpoint=new ConnectionEndpoint("127.0.0.1",2333),SocketEndpoint=new ConnectionEndpoint("127.0.0.1",2333),Password="youshallnotpass"});LavaLink.Disconnected+=LavaLinkDisconnected;await ctx.ReplyAsync("yes");}public Connect(DiscordClient client):base(client){}}public class Disconnect:Command{public override string GroupName=>"MusicStuff";public override string Description=>"a";public override async Task Run(MessageContext ctx){if(Connect.LavaLink is null){await ctx.ReplyAsync("what if no");return;}var lava=ctx.Client.GetLavalink();if(lava is null){await ctx.ReplyAsync("no what you trying to do bruh");return;}await Connect.LavaLink.StopAsync();Connect.LavaLink=null;await ctx.ReplyAsync("disconnected");}public override async Task Run(InteractionContext ctx){if(Connect.LavaLink is null)return;var lava=ctx.Client.GetLavalink();if(lava is null){await ctx.ReplyAsync("no what you trying to do bruh");return;}await Connect.LavaLink.StopAsync();Connect.LavaLink=null;await ctx.ReplyAsync("disconnected ");}public Disconnect(DiscordClient client):base(client){}}}namespace CommandsTest.Commands.MusicStuff{public class Join:Command{public override string GroupName=>"MusicStuff";public override string Description=>"aadw";public override Argument[]Arguments=>new Argument[]{new(){Key="Channel",Optional=true,Types=new[]{typeof(DiscordVoiceChannelArgumentType)}}};public override async Task Run(MessageContext ctx){if(Connect.LavaLink is null){await ctx.ReplyAsync("lavalink no");return;}var channel=ctx.GetArg<DiscordChannel>("Channel")??((DiscordMember)ctx.Author).VoiceState?.Channel;if(channel is null){await ctx.ReplyAsync("no");return;}try{_=Task.Run(async()=>{Connect.LavaLinkVoice=await Connect.LavaLink.ConnectAsync(channel);Connect.LavaLinkVoice.PlaybackFinished+=LavaLinkVoicePlaybackFinished;Connect.LavaLinkVoice.DiscordWebSocketClosed+=(_,_)=>ctx.ReplyAsync("discord websocket closed ig");await ctx.ReplyAsync("pog");});}catch(Exception e){Console.WriteLine(e);throw;}}private async Task LavaLinkVoicePlaybackFinished(LavalinkGuildConnection ll,TrackFinishEventArgs e){if(Connect.ContextChannel is null)return;await Connect.ContextChannel.SendMessageAsync($"what next");}public override async Task Run(InteractionContext ctx){if(Connect.LavaLink is null){await ctx.ReplyAsync("not connected :|");return;}var channel=ctx.GetArg<DiscordChannel>("Channel")??((DiscordMember)ctx.Author).VoiceState.Channel;if(channel is null){await ctx.ReplyAsync("no");return;}try{_=Task.Run(async()=>{Connect.LavaLinkVoice=await Connect.LavaLink.ConnectAsync(channel);Connect.LavaLinkVoice.PlaybackFinished+=LavaLinkVoicePlaybackFinished;Connect.LavaLinkVoice.DiscordWebSocketClosed+=(_,_)=>ctx.ReplyAsync("discord websocket closed ig");await ctx.ReplyAsync("pog");});}catch(Exception e){ctx.Client.Logger.Error(e);throw;}}public Join(DiscordClient client):base(client){}}public class Leave:Command{public override string GroupName=>"MusicStuff";public override string Description=>"aa";public override async Task Run(MessageContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.DisconnectAsync();Connect.LavaLinkVoice=null;if(Connect.ContextChannel is not null)await Connect.ContextChannel.SendMessageAsync("ok");}public override async Task Run(InteractionContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.DisconnectAsync();Connect.LavaLinkVoice=null;await ctx.ReplyAsync("ok");}public Leave(DiscordClient client):base(client){}}}namespace CommandsTest.Commands.MusicStuff{public class Play:Command{public override string GroupName=>"MusicStuff";public override string Description=>"adwd";public override Argument[]Arguments=>new Argument[]{new(){Key="Uri",Types=new[]{typeof(string)}}};public override async Task Run(MessageContext ctx){var uri=new Uri(ctx.GetArg<string>("Uri"));if(Connect.LavaLinkVoice is null)return;Connect.ContextChannel=ctx.Channel;var trackLoad=await Connect.LavaLink.Rest.GetTracksAsync(uri);var track=trackLoad.Tracks.First();await Connect.LavaLinkVoice.PlayAsync(track);await ctx.ReplyAsync($"Now playing: {Formatter.Bold(Formatter.Sanitize(track.Title))} by {Formatter.Bold(Formatter.Sanitize(track.Author))}.");}public override async Task Run(InteractionContext ctx){var uri=new Uri(ctx.GetArg<string>("Uri"));if(Connect.LavaLinkVoice is null)return;Connect.ContextChannel=ctx.Channel;var trackLoad=await Connect.LavaLink.Rest.GetTracksAsync(uri);var track=trackLoad.Tracks.First();await Connect.LavaLinkVoice.PlayAsync(track);await ctx.ReplyAsync($"Now playing: {Formatter.Bold(Formatter.Sanitize(track.Title))} by {Formatter.Bold(Formatter.Sanitize(track.Author))}.");}public Play(DiscordClient client):base(client){}}public class Pause:Command{public override string GroupName=>"MusicStuff";public override string Description=>"adwd";public override async Task Run(MessageContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.PauseAsync();await ctx.ReplyAsync("ok");}public override async Task Run(InteractionContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.PauseAsync();await ctx.ReplyAsync("ok");}public Pause(DiscordClient client):base(client){}}public class Resume:Command{public override string GroupName=>"MusicStuff";public override string Description=>"adwd";public override async Task Run(MessageContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.ResumeAsync();await ctx.ReplyAsync("ok");}public override async Task Run(InteractionContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.ResumeAsync();await ctx.ReplyAsync("ok");}public Resume(DiscordClient client):base(client){}}public class Stop:Command{public override string GroupName=>"MusicStuff";public override string Description=>"adwd";public override async Task Run(MessageContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.StopAsync();await ctx.ReplyAsync("ok");}public override async Task Run(InteractionContext ctx){if(Connect.LavaLinkVoice is null)return;await Connect.LavaLinkVoice.StopAsync();await ctx.ReplyAsync("ok");}public Stop(DiscordClient client):base(client){}}}namespace CommandsTest.Data{public class AfkEntity{private string _id;public string Id{get=>_id??=Guid.NewGuid().ToString();set=>_id=value;}public ulong UserId{get;set;}public DateTime AfkSetTime{get;set;}public string Message{get;set;}public AfkEntity(){_id=Guid.NewGuid().ToString();}}}namespace CommandsTest.Data{public class CommandEntity{private string _id;[Key]public string Id{get=>_id??=Guid.NewGuid().ToString();set=>_id=value;}public string Name{get;set;}public static implicit operator Command(CommandEntity ce)=>ce.Name;public CommandEntity(){Id=_id=Guid.NewGuid().ToString();}}}namespace CommandsTest.Data{public class BlacklistEntity{[Key]public ulong Id{get;set;}public ulong GuildId{get;set;}public GuildEntity GuildEntity{get;set;}public List<CommandEntity>Commands{get;set;}=new();public List<GroupEntity>Groups{get;set;}=new();}}namespace CommandsTest.Data{public class GroupEntity{private string _id;[Key]public string Id{get=>_id??=Guid.NewGuid().ToString();set=>_id=value;}public string Name{get;set;}public static implicit operator Group(GroupEntity ge)=>ge.Name;public GroupEntity(){Id=_id=Guid.NewGuid().ToString();}}}namespace CommandsTest.Data{public class GuildContext:DbContext{public DbSet<GuildEntity>Guilds{get;set;}public DbSet<BlacklistEntity>Blacklist{get;set;}public DbSet<TagEntity>Tags{get;set;}public DbSet<AfkEntity>Afk{get;set;}protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder){optionsBuilder.UseNpgsql(Constants.DatabaseConnectionString);}protected override void OnModelCreating(ModelBuilder modelBuilder){modelBuilder.Entity<GuildEntity>().HasMany(x=>x.Blacklist).WithOne(x=>x.GuildEntity).HasForeignKey(x=>x.GuildId);modelBuilder.Entity<GuildEntity>().HasMany(x=>x.Tags).WithOne(x=>x.GuildEntity).HasForeignKey(x=>x.GuildId);modelBuilder.Entity<BlacklistEntity>().HasMany(x=>x.Commands);modelBuilder.Entity<BlacklistEntity>().HasMany(x=>x.Groups);}}}namespace CommandsTest.Data{public class GuildEntity{[Key]public ulong Id{get=>GuildId;set=>GuildId=value;}public ulong GuildId{get;set;}public List<BlacklistEntity>Blacklist{get;set;}=new();public List<TagEntity>Tags{get;set;}=new();}}namespace CommandsTest.Data{public class TagEntity{private string _id;public string Id{get=>_id??=Guid.NewGuid().ToString();set=>_id=value;}public ulong GuildId{get;set;}public GuildEntity GuildEntity{get;set;}public ulong ThePersonWhoMadeThisTagUserId{get;set;}public string Content{get;set;}public string Name{get;set;}public TagEntity(){_id=Guid.NewGuid().ToString();}}}namespace CommandsTest.Migrations{public partial class InitialCreate:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.CreateTable("Guilds",table=>new{Id=table.Column<decimal>("numeric(20,0)",nullable:false)},constraints:table=>{table.PrimaryKey("PK_Guilds",x=>x.Id);});migrationBuilder.CreateTable("Blacklist",table=>new{Id=table.Column<decimal>("numeric(20,0)",nullable:false),GuildId=table.Column<decimal>("numeric(20,0)",nullable:false)},constraints:table=>{table.PrimaryKey("PK_Blacklist",x=>x.Id);table.ForeignKey("FK_Blacklist_Guilds_GuildId",x=>x.GuildId,"Guilds","Id",onDelete:ReferentialAction.Cascade);});migrationBuilder.CreateTable("CommandEntity",table=>new{Name=table.Column<string>("text",nullable:false),BlacklistEntityId=table.Column<decimal>("numeric(20,0)",nullable:true)},constraints:table=>{table.PrimaryKey("PK_CommandEntity",x=>x.Name);table.ForeignKey("FK_CommandEntity_Blacklist_BlacklistEntityId",x=>x.BlacklistEntityId,"Blacklist","Id");});migrationBuilder.CreateTable("GroupEntity",table=>new{Name=table.Column<string>("text",nullable:false),BlacklistEntityId=table.Column<decimal>("numeric(20,0)",nullable:true)},constraints:table=>{table.PrimaryKey("PK_GroupEntity",x=>x.Name);table.ForeignKey("FK_GroupEntity_Blacklist_BlacklistEntityId",x=>x.BlacklistEntityId,"Blacklist","Id");});migrationBuilder.CreateIndex("IX_Blacklist_GuildId","Blacklist","GuildId");migrationBuilder.CreateIndex("IX_CommandEntity_BlacklistEntityId","CommandEntity","BlacklistEntityId");migrationBuilder.CreateIndex("IX_GroupEntity_BlacklistEntityId","GroupEntity","BlacklistEntityId");}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropTable("CommandEntity");migrationBuilder.DropTable("GroupEntity");migrationBuilder.DropTable("Blacklist");migrationBuilder.DropTable("Guilds");}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20210927114812_InitialCreate")]partial class InitialCreate{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");});}}}namespace CommandsTest.Migrations{public partial class Relations:Migration{protected override void Up(MigrationBuilder migrationBuilder){}protected override void Down(MigrationBuilder migrationBuilder){}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20210928113549_Relations")]partial class Relations{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");});}}}namespace CommandsTest.Migrations{public partial class RenameAFewThings:Migration{protected override void Up(MigrationBuilder migrationBuilder){}protected override void Down(MigrationBuilder migrationBuilder){}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20210928114724_RenameAFewThings")]partial class RenameAFewThings{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");});}}}namespace CommandsTest.Migrations{public partial class FixIg:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.AddColumn<decimal>("GuildId","Guilds","numeric(20,0)",nullable:false,defaultValue:0m);}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropColumn("GuildId","Guilds");}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20210928160206_FixIg")]partial class FixIg{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Name").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.HasKey("Name");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");});}}}namespace CommandsTest.Migrations{public partial class Fix2:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.DropPrimaryKey("PK_GroupEntity","GroupEntity");migrationBuilder.DropPrimaryKey("PK_CommandEntity","CommandEntity");migrationBuilder.AlterColumn<string>("Name","GroupEntity","text",nullable:true,oldClrType:typeof(string),oldType:"text");migrationBuilder.AddColumn<string>("Id","GroupEntity","text",nullable:false,defaultValue:"");migrationBuilder.AlterColumn<string>("Name","CommandEntity","text",nullable:true,oldClrType:typeof(string),oldType:"text");migrationBuilder.AddColumn<string>("Id","CommandEntity","text",nullable:false,defaultValue:"");migrationBuilder.AddPrimaryKey("PK_GroupEntity","GroupEntity","Id");migrationBuilder.AddPrimaryKey("PK_CommandEntity","CommandEntity","Id");}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropPrimaryKey("PK_GroupEntity","GroupEntity");migrationBuilder.DropPrimaryKey("PK_CommandEntity","CommandEntity");migrationBuilder.DropColumn("Id","GroupEntity");migrationBuilder.DropColumn("Id","CommandEntity");migrationBuilder.AlterColumn<string>("Name","GroupEntity","text",nullable:false,defaultValue:"",oldClrType:typeof(string),oldType:"text",oldNullable:true);migrationBuilder.AlterColumn<string>("Name","CommandEntity","text",nullable:false,defaultValue:"",oldClrType:typeof(string),oldType:"text",oldNullable:true);migrationBuilder.AddPrimaryKey("PK_GroupEntity","GroupEntity","Name");migrationBuilder.AddPrimaryKey("PK_CommandEntity","CommandEntity","Name");}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20210928161427_Fix2")]partial class Fix2{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");});}}}namespace CommandsTest.Migrations{public partial class Tags:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.CreateTable("Tags",table=>new{Id=table.Column<string>("text",nullable:false),GuildId=table.Column<decimal>("numeric(20,0)",nullable:false),ThePersonWhoMadeThisTagUserId=table.Column<decimal>("numeric(20,0)",nullable:false),Content=table.Column<string>("text",nullable:true)},constraints:table=>{table.PrimaryKey("PK_Tags",x=>x.Id);table.ForeignKey("FK_Tags_Guilds_GuildId",x=>x.GuildId,"Guilds","Id",onDelete:ReferentialAction.Cascade);});migrationBuilder.CreateIndex("IX_Tags_GuildId","Tags","GuildId");}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropTable("Tags");}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20211009163133_Tags")]partial class Tags{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<string>("Content").HasColumnType("text");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.Property<decimal>("ThePersonWhoMadeThisTagUserId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Tags");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Tags").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");b.Navigation("Tags");});}}}namespace CommandsTest.Migrations{public partial class TagName:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.AddColumn<string>("Name","Tags","text",nullable:true);}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropColumn("Name","Tags");}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20211009171800_TagName")]partial class TagName{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<string>("Content").HasColumnType("text");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.Property<decimal>("ThePersonWhoMadeThisTagUserId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Tags");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Tags").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");b.Navigation("Tags");});}}}namespace CommandsTest.Migrations{public partial class Afk:Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.CreateTable("Afk",table=>new{Id=table.Column<string>("text",nullable:false),UserId=table.Column<decimal>("numeric(20,0)",nullable:false),AfkSetTime=table.Column<DateTime>("timestamp with time zone",nullable:false),Message=table.Column<string>("text",nullable:true)},constraints:table=>{table.PrimaryKey("PK_Afk",x=>x.Id);});}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropTable("Afk");}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))][Migration("20211010160353_Afk")]partial class Afk{protected override void BuildTargetModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.AfkEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<DateTime>("AfkSetTime").HasColumnType("timestamp with time zone");b.Property<string>("Message").HasColumnType("text");b.Property<decimal>("UserId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Afk");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<string>("Content").HasColumnType("text");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.Property<decimal>("ThePersonWhoMadeThisTagUserId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Tags");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Tags").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");b.Navigation("Tags");});}}}namespace CommandsTest.Migrations{[DbContext(typeof(GuildContext))]internal class GuildContextModelSnapshot:ModelSnapshot{protected override void BuildModel(ModelBuilder modelBuilder){modelBuilder.HasAnnotation("ProductVersion","6.0.0-rc.1.21452.10").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("CommandsTest.Data.AfkEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<DateTime>("AfkSetTime").HasColumnType("timestamp with time zone");b.Property<string>("Message").HasColumnType("text");b.Property<decimal>("UserId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Afk");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Blacklist");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("CommandEntity");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<decimal?>("BlacklistEntityId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.HasKey("Id");b.HasIndex("BlacklistEntityId");b.ToTable("GroupEntity");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Property<decimal>("Id").ValueGeneratedOnAdd().HasColumnType("numeric(20,0)");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.ToTable("Guilds");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.Property<string>("Id").HasColumnType("text");b.Property<string>("Content").HasColumnType("text");b.Property<decimal>("GuildId").HasColumnType("numeric(20,0)");b.Property<string>("Name").HasColumnType("text");b.Property<decimal>("ThePersonWhoMadeThisTagUserId").HasColumnType("numeric(20,0)");b.HasKey("Id");b.HasIndex("GuildId");b.ToTable("Tags");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Blacklist").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.CommandEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Commands").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.GroupEntity",b=>{b.HasOne("CommandsTest.Data.BlacklistEntity",null).WithMany("Groups").HasForeignKey("BlacklistEntityId");});modelBuilder.Entity("CommandsTest.Data.TagEntity",b=>{b.HasOne("CommandsTest.Data.GuildEntity","GuildEntity").WithMany("Tags").HasForeignKey("GuildId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.Navigation("GuildEntity");});modelBuilder.Entity("CommandsTest.Data.BlacklistEntity",b=>{b.Navigation("Commands");b.Navigation("Groups");});modelBuilder.Entity("CommandsTest.Data.GuildEntity",b=>{b.Navigation("Blacklist");b.Navigation("Tags");});}}}namespace CommandsTest.Modules{public class AfkModule{private readonly List<AfkEntity>_afk;private readonly CommandsTest.Data.GuildContext _guildContext;public AfkModule(){_afk=(_guildContext=new CommandsTest.Data.GuildContext()).Afk.ToList();}public async Task OnMessage(DiscordClient sender,MessageCreateEventArgs e){if(e.Author.IsBot)return;var first=_afk.FirstOrDefault(x=>e.MentionedUsers.Any(x2=>x2.Id==x.UserId));if(first is not null)await e.Message.ReplyAsync($"{(await sender.GetUserAsync(first.UserId)).Username} is afk: {first.Message}, <t:{first.AfkSetTime.ConvertToUnixTimestamp()}:R>");if(_afk.Any(x=>x.UserId==e.Author.Id)){await e.Message.ReplyAsync($"welcome back {e.Author.Username}, i removed your afk");RemoveAfk(e.Author);}}public async void SetAfk(DiscordUser user,string message){var newAfk=new AfkEntity{UserId=user.Id,Message=message,AfkSetTime=DateTime.Now.ToUniversalTime()};_afk.Add(newAfk);_guildContext.Afk.Add(newAfk);await _guildContext.SaveChangesAsync();}public async void RemoveAfk(DiscordUser user){var afkToRemove=_afk.FirstOrDefault(x=>x.UserId==user.Id);if(afkToRemove is null)throw new FriendlyException("epic fail");_afk.Remove(afkToRemove);_guildContext.Afk.Remove(afkToRemove);await _guildContext.SaveChangesAsync();}}}namespace CommandsTest.Modules{public class BlacklistModule{private List<CommandsTest.Data.GuildEntity>Cache{get;set;}public BlacklistModule()=>UpdateCache();private bool CanUserUse(DiscordUser user,DiscordGuild guild,Command command){var guildEntity=Cache.FirstOrDefault(x=>x.GuildId==guild.Id);var blacklist=guildEntity?.Blacklist.FirstOrDefault(x=>x.Id==user.Id);if(blacklist is null||!blacklist.Commands.Any()||!blacklist.Groups.Any())return true;var commandEntity=blacklist.Commands.FirstOrDefault(x=>x.Name==command.Name);if(commandEntity is not default(CommandEntity))return false;var group=blacklist.Groups.FirstOrDefault(x=>x.Name==command.Group.Name);return group is default(GroupEntity);}public BlacklistResult BlacklistUser(DiscordUser user,DiscordGuild guild,Command command){using var guildContext=new CommandsTest.Data.GuildContext();var guildEntity=guildContext.Find<CommandsTest.Data.GuildEntity>(guild.Id);if(guildEntity is null){var newGuildEntity=new CommandsTest.Data.GuildEntity{GuildId=guild.Id};var blackListEntity=new BlacklistEntity{Id=user.Id,GuildId=guild.Id};var newCommandEntity=new CommandEntity{Name=command.Name};_=newCommandEntity.Id;blackListEntity.Commands.Add(newCommandEntity);newGuildEntity.Blacklist.Add(blackListEntity);guildContext.Add(newGuildEntity);guildContext.Add(blackListEntity);guildContext.SaveChanges();Cache.Add(newGuildEntity);return BlacklistResult.Added;}var blacklistForUser=guildContext.Blacklist.Where(x=>x.Id==user.Id).Include(x=>x.Commands).Include(x=>x.Groups).FirstOrDefault();if(blacklistForUser is default(BlacklistEntity)){blacklistForUser=new BlacklistEntity{Commands=new List<CommandEntity>(),Groups=new List<GroupEntity>(),GuildId=guild.Id,Id=user.Id};Cache.FirstOrDefault(x=>x.GuildId==guild.Id)?.Blacklist.Add(blacklistForUser);guildContext.Blacklist.Add(blacklistForUser);guildContext.SaveChanges();return BlacklistResult.Added;}if(blacklistForUser.Commands.Exists(x=>x.Name==command.Name))return BlacklistResult.AlreadyBlacklisted;blacklistForUser.Commands.Add(new CommandEntity{Name=command.Name});guildContext.SaveChanges();Cache[Cache.IndexOf(Cache.First(x=>x.GuildId==guildEntity.GuildId))]=guildEntity;return BlacklistResult.Added;}public BlacklistResult BlacklistUser(DiscordUser user,DiscordGuild guild,Group group){using var guildContext=new CommandsTest.Data.GuildContext();var guildEntity=guildContext.Guilds.Find(guild.Id);if(guildEntity is null){var newGuildEntity=new CommandsTest.Data.GuildEntity{GuildId=guild.Id};var blackListEntity=new BlacklistEntity{Id=user.Id};var groupEntity=new GroupEntity{Name=group.Name};blackListEntity.Groups.Add(groupEntity);newGuildEntity.Blacklist.Add(blackListEntity);guildContext.SaveChanges();Cache.Add(newGuildEntity);return BlacklistResult.Added;}var blacklistForUser=guildContext.Blacklist.Where(x=>x.Id==user.Id).Include(x=>x.Commands).Include(x=>x.Groups).FirstOrDefault();if(blacklistForUser is default(BlacklistEntity)){blacklistForUser=new BlacklistEntity{Commands=new List<CommandEntity>(),Groups=new List<GroupEntity>(),GuildId=guild.Id,Id=user.Id};Cache.FirstOrDefault(x=>x.GuildId==guild.Id)?.Blacklist.Add(blacklistForUser);guildContext.Blacklist.Add(blacklistForUser);guildContext.SaveChanges();return BlacklistResult.Added;}if(blacklistForUser.Groups.Exists(x=>x.Name==group.Name))return BlacklistResult.AlreadyBlacklisted;blacklistForUser.Groups.Add(new GroupEntity{Name=group.Name});guildContext.SaveChanges();Cache[Cache.IndexOf(Cache.First(x=>x.GuildId==guildEntity.GuildId))]=guildEntity;return BlacklistResult.Added;}public WhitelistResult WhiteListUser(DiscordUser user,DiscordGuild guild,Command command){if(!Cache.Find(x=>x.GuildId==guild.Id)?.Blacklist?.Any(x=>x.Id==user.Id&&x.Commands.Any(cmd=>cmd.Name==command.Name))??true)return WhitelistResult.NotBlacklisted;using var context=new CommandsTest.Data.GuildContext();var blacklist=context.Blacklist.Include(x=>x.Commands).Include(x=>x.Groups).Include(x=>x.GuildEntity).First(x=>x.Id==user.Id);blacklist.Commands.Remove(blacklist.Commands.First(x=>x.Name==command.Name));context.Guilds.First(x=>x.Id==guild.Id).Blacklist.First(x=>x.Id==user.Id).Commands=blacklist.Commands;context.SaveChanges();context.Dispose();var temp=Cache.First(x=>x.Id==guild.Id).Blacklist.First(x=>x.Id==user.Id);temp.Commands.Remove(temp.Commands.First(x=>x.Name==command.Name));Cache.First(x=>x.Id==guild.Id).Blacklist.First(x=>x.Id==user.Id).Commands=temp.Commands;return WhitelistResult.Removed;}public WhitelistResult WhiteListUser(DiscordUser user,DiscordGuild guild,Group group){if(!Cache.Find(x=>x.GuildId==guild.Id)?.Blacklist?.Any(x=>x.Id==user.Id&&x.Groups.Any(cmd=>cmd.Name==group.Name))??true)return WhitelistResult.NotBlacklisted;using var context=new CommandsTest.Data.GuildContext();var blacklist=context.Blacklist.Include(x=>x.Commands).Include(x=>x.Groups).Include(x=>x.GuildEntity).First(x=>x.Id==user.Id);blacklist.Groups.Remove(blacklist.Groups.First(x=>x.Name==group.Name));context.Guilds.First(x=>x.Id==guild.Id).Blacklist.First(x=>x.Id==user.Id).Groups=blacklist.Groups;context.SaveChanges();context.Dispose();var temp=Cache.First(x=>x.Id==guild.Id).Blacklist.First(x=>x.Id==user.Id);temp.Groups.Remove(temp.Groups.First(x=>x.Name==group.Name));Cache.First(x=>x.Id==guild.Id).Blacklist.First(x=>x.Id==user.Id).Groups=temp.Groups;return WhitelistResult.Removed;}public Inhibition Check(DiscordInteraction interaction,Command command){return CanUserUse(interaction.User,interaction.Channel.Guild,command)?default:new Inhibition{Reason="BLACKLIST",Response="blacklist moment"};}public Inhibition Check(DiscordMessage message,Command command){return CanUserUse(message.Author,message.Channel.Guild,command)?default:new Inhibition{Reason="BLACKLIST",Response="blacklist moment"};}private void UpdateCache(){using var guildContext=new CommandsTest.Data.GuildContext();var blacklist=guildContext.Blacklist.Include(x=>x.Commands).Include(x=>x.Groups).Include(x=>x.GuildEntity).ToList();var guilds=guildContext.Guilds.Include(x=>x.Blacklist).ToList();Cache=guilds.Select(x=>new CommandsTest.Data.GuildEntity{Blacklist=blacklist.Where(blacklistEntity=>blacklistEntity.GuildId==x.GuildId).ToList(),}).ToList();Cache.ForEach(x=>x.GuildId=x.Blacklist.First().GuildId);}}public enum WhitelistResult{Removed,NotBlacklisted}public enum BlacklistResult{Added,AlreadyBlacklisted}}namespace CommandsTest.Modules{public class GlobalTags:TagsModule{[Tag]public string Test(MessageContext ctx){return"test";}[Tag]public string Test(InteractionContext ctx){return"test";}[Tag]public string A(MessageContext ctx){return"test";}[Tag]public string A(InteractionContext ctx){return"test";}[Tag]public string B(MessageContext ctx){return"test";}[Tag]public string B(InteractionContext ctx){return"test";}[Tag]public string C(MessageContext ctx){return"test";}[Tag]public string C(InteractionContext ctx){return"test";}[Tag]public string D(MessageContext ctx){return"test";}[Tag]public string D(InteractionContext ctx){return"test";}[Tag]public string E(MessageContext ctx){return"test";}[Tag]public string E(InteractionContext ctx){return"test";}[Tag]public string F(MessageContext ctx){return"test";}[Tag]public string F(InteractionContext ctx){return"test";}[Tag]public string G(MessageContext ctx){return"test";}[Tag]public string G(InteractionContext ctx){return"test";}[Tag]public string H(MessageContext ctx){return"test";}[Tag]public string H(InteractionContext ctx){return"test";}}public class TagsModule{}}namespace CommandsTest.Utils{public static class Extentions{private static Dictionary<DiscordClient,BlacklistModule>BlacklistModules{get;set;}=new();public static BlacklistModule GetBlacklistModule(this DiscordClient client)=>BlacklistModules[client];public static BlacklistModule AddBlacklistModule(this DiscordClient client){var module=new BlacklistModule();BlacklistModules.Add(client,module);return module;}private static Dictionary<DiscordClient,AfkModule>AfkModules{get;set;}=new();public static AfkModule GetAfkModule(this DiscordClient client)=>AfkModules[client];public static AfkModule AddAfkModule(this DiscordClient client){var module=new AfkModule();AfkModules.Add(client,module);return module;}}}